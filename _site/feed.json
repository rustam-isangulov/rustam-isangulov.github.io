{
    "version": "https://jsonfeed.org/version/1",
    "title": "blog",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "A collection of articles on matters of software engineering.",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "http://localhost:4000/2022/08/02/java-fundamentals-ftputil-uberjar",
            "title": "Using Apache Maven Assembly Plugin to produce jars with all dependencies.",
            "summary": null,
            "content_text": "Toolkit: macOS | InelliJ IDEA | Apache Maven Assembly Plugin | JShellSources: GitHubObjectivesConfigure FtpUtility project to output a *.jar file that contains all depndencies.Add dependencies to maven-assembly-plugin in pom.xml&lt;build&gt;  &lt;plugins&gt;    &lt;plugin&gt;      &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;      &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt;      &lt;configuration&gt;        &lt;archiveBaseDirectory&gt;${project.basedir}&lt;/archiveBaseDirectory&gt;        &lt;archive&gt;          &lt;manifest&gt;            &lt;mainClass&gt;FtpUtil.FtpUtil&lt;/mainClass&gt;          &lt;/manifest&gt;        &lt;/archive&gt;        &lt;descriptorRefs&gt;          &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt;        &lt;/descriptorRefs&gt;        &lt;appendAssemblyId&gt;true&lt;/appendAssemblyId&gt;      &lt;/configuration&gt;      &lt;executions&gt;        &lt;execution&gt;          &lt;phase&gt;package&lt;/phase&gt;          &lt;goals&gt;            &lt;goal&gt;single&lt;/goal&gt;          &lt;/goals&gt;        &lt;/execution&gt;      &lt;/executions&gt;    &lt;/plugin&gt;  &lt;/plugins&gt;&lt;/build&gt;Build the project and produce an uber-jarUse mvn package command in the IntelliJ Terminal tab to produce a newly specified output:% mvn package[INFO] Scanning for projects...[INFO][INFO] ------------------------&lt; org.example:ftputil &gt;-------------------------[INFO] Building ftputil 0.2...[INFO] META-INF/NOTICE.txt already added, skipping[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  5.175 s[INFO] Finished at: 2022-08-03T11:02:22+01:00[INFO] ------------------------------------------------------------------------Check if the target directory contains the new *.jar with dependencies: % ls -la targettotal 1184drwxr-xr-x  12 rv  staff     384 Aug  3 11:02 .drwxr-xr-x   6 rv  staff     192 Aug  2 15:11 ..drwxr-xr-x   2 rv  staff      64 Aug  2 14:56 archive-tmpdrwxr-xr-x   4 rv  staff     128 Aug  1 13:36 classes-rw-r--r--   1 rv  staff  561750 Aug  3 11:02 ftputil-0.2-jar-with-dependencies.jar-rw-r--r--   1 rv  staff   11491 Aug  2 15:11 ftputil-0.2.jardrwxr-xr-x   3 rv  staff      96 Jul 30 19:59 generated-sourcesdrwxr-xr-x   3 rv  staff      96 Jul 30 19:59 generated-test-sourcesdrwxr-xr-x   3 rv  staff      96 Jul 30 19:59 maven-archiverdrwxr-xr-x   3 rv  staff      96 Jul 30 19:59 maven-statusdrwxr-xr-x  10 rv  staff     320 Jul 30 19:59 surefire-reportsdrwxr-xr-x   3 rv  staff      96 Jul 30 19:59 test-classesNote the new output file ftputil-0.2-jar-with-dependencies.jar, this jar contains ftputil applicaiton and all its dependencies.Example of using the jar archive with all dependenciesWe can use jshell environment to see differences between a default jar and one with all dependencies included.In the following example, the objective is to use FtpClient to list files and directories on an FTP server.First, we try to use the default ftputil.jar:% jshell|  Welcome to JShell -- Version 11.0.12|  For an introduction type: /help introjshell&gt; /env --class-path target/ftputil-0.2.jar|  Setting new options and restoring state.import ftputil.*;jshell&gt; FtpClient client = FtpClient.getClient(\"ftp.ebi.ac.uk\", new FTPClient());|  Error:|  cannot find symbol|    symbol:   class FTPClient|  FtpClient client = FtpClient.getClient(\"ftp.ebi.ac.uk\", new FTPClient());|                                                              ^-------^At this point jshell cannot find FTPClient class. If we try to resolve this by an appropriate import it still does not work since apache commons net library jar is not on the class path:jshell&gt; import org.apache.commons.net.ftp.*;|  Error:|  package org.apache.commons.net.ftp does not exist|  import org.apache.commons.net.ftp.*;|  ^Now, we can load the uber-jar ftputil-0.2-jar-with-dependencies.jar and try again:jshell&gt; /env --class-path target/ftputil-0.2-jar-with-dependencies.jar|  Setting new options and restoring state.jshell&gt; import org.apache.commons.net.ftp.*;jshell&gt; FtpClient client = FtpClient.getClient(URI.create(\"ftp.ebi.ac.uk\"), new FTPClient());client ==&gt; ftputil.FtpClient@a67c67eWe have successfully loaded dependencies and created an FtpClient object. Now we can use it to list files and directories in /pub:jshell&gt; client.listFiles(Path.of(\"/pub/\")).forEach(System.out::println);lrwxrwxrwx    1 ftp      ftp            20 Jul 20  2012 blast -&gt; databases/ncbi/blastdrwxrwxr-x   68 ftp      ftp          1815 Jun 30 14:32 contribdrwxrwxr-x  207 ftp      ftp          5444 Jul 19 14:33 databasesdrwxrwxr-x    2 ftp      ftp          1466 Aug 29  2002 embnet.newsdrwxrwxr-x    2 ftp      ftp          1646 Feb 18  2021 helpdrwxr-x---    7 ftp      ftp          1114 May 15  2000 mirror-patch-testdrwxrwxr-x    2 ftp      ftp           149 Jul 14 14:17 phddrwxrwxr-x   34 ftp      ftp           946 Jul 15 13:31 softwaredrwxrwxr-x   16 ftp      ftp           335 Feb 14 15:51 trainingjshell&gt; client.close();Thank you.",
            "content_html": "<div class=\"post\"><p>Toolkit: macOS | <a href=\"https://www.jetbrains.com/idea/\">InelliJ IDEA</a> | <a href=\"https://maven.apache.org/plugins/maven-assembly-plugin/\">Apache Maven Assembly Plugin</a> | <a href=\"https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm\">JShell</a></p><p>Sources: <a href=\"https://github.com/rustam-isangulov/java.fundamentals\">GitHub</a></p></div><div id=\"outline-container-org0c518b5\" class=\"outline-2\"><h2 id=\"org0c518b5\">Objectives</h2><div class=\"outline-text-2\" id=\"text-org0c518b5\"><p>Configure <a href=\"https://rustam-isangulov.github.io/2022/07/30/java-fundamentals-ftputil\">FtpUtility</a> project to output a <code>*.jar</code> file that contains all depndencies.</p></div></div><div id=\"outline-container-orgee6ea2d\" class=\"outline-2\"><h2 id=\"orgee6ea2d\">Add dependencies to <code>maven-assembly-plugin</code> in <code>pom.xml</code></h2><div class=\"outline-text-2\" id=\"text-orgee6ea2d\"><div class=\"org-src-container\"><pre class=\"src src-xml\">&lt;<span style=\"color: #E06C75;\">build</span>&gt;  &lt;<span style=\"color: #E06C75;\">plugins</span>&gt;    &lt;<span style=\"color: #E06C75;\">plugin</span>&gt;      &lt;<span style=\"color: #E06C75;\">groupId</span>&gt;org.apache.maven.plugins&lt;/<span style=\"color: #E06C75;\">groupId</span>&gt;      &lt;<span style=\"color: #E06C75;\">artifactId</span>&gt;maven-assembly-plugin&lt;/<span style=\"color: #E06C75;\">artifactId</span>&gt;      &lt;<span style=\"color: #E06C75;\">configuration</span>&gt;        &lt;<span style=\"color: #E06C75;\">archiveBaseDirectory</span>&gt;${project.basedir}&lt;/<span style=\"color: #E06C75;\">archiveBaseDirectory</span>&gt;        &lt;<span style=\"color: #E06C75;\">archive</span>&gt;          &lt;<span style=\"color: #E06C75;\">manifest</span>&gt;            &lt;<span style=\"color: #E06C75;\">mainClass</span>&gt;FtpUtil.FtpUtil&lt;/<span style=\"color: #E06C75;\">mainClass</span>&gt;          &lt;/<span style=\"color: #E06C75;\">manifest</span>&gt;        &lt;/<span style=\"color: #E06C75;\">archive</span>&gt;        &lt;<span style=\"color: #E06C75;\">descriptorRefs</span>&gt;          &lt;<span style=\"color: #E06C75;\">descriptorRef</span>&gt;jar-with-dependencies&lt;/<span style=\"color: #E06C75;\">descriptorRef</span>&gt;        &lt;/<span style=\"color: #E06C75;\">descriptorRefs</span>&gt;        &lt;<span style=\"color: #E06C75;\">appendAssemblyId</span>&gt;true&lt;/<span style=\"color: #E06C75;\">appendAssemblyId</span>&gt;      &lt;/<span style=\"color: #E06C75;\">configuration</span>&gt;      &lt;<span style=\"color: #E06C75;\">executions</span>&gt;        &lt;<span style=\"color: #E06C75;\">execution</span>&gt;          &lt;<span style=\"color: #E06C75;\">phase</span>&gt;package&lt;/<span style=\"color: #E06C75;\">phase</span>&gt;          &lt;<span style=\"color: #E06C75;\">goals</span>&gt;            &lt;<span style=\"color: #E06C75;\">goal</span>&gt;single&lt;/<span style=\"color: #E06C75;\">goal</span>&gt;          &lt;/<span style=\"color: #E06C75;\">goals</span>&gt;        &lt;/<span style=\"color: #E06C75;\">execution</span>&gt;      &lt;/<span style=\"color: #E06C75;\">executions</span>&gt;    &lt;/<span style=\"color: #E06C75;\">plugin</span>&gt;  &lt;/<span style=\"color: #E06C75;\">plugins</span>&gt;&lt;/<span style=\"color: #E06C75;\">build</span>&gt;</pre></div></div></div><div id=\"outline-container-org3681e63\" class=\"outline-2\"><h2 id=\"org3681e63\">Build the project and produce an uber-jar</h2><div class=\"outline-text-2\" id=\"text-org3681e63\"><p>Use <code>mvn package</code> command in the <code>IntelliJ</code> <code>Terminal</code> tab to produce a newly specified output:</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% mvn package[INFO] Scanning for projects...[INFO][INFO] ------------------------&lt; org.example:ftputil &gt;-------------------------[INFO] Building ftputil 0.2...[INFO] META-INF/NOTICE.txt already added, skipping[INFO] ------------------------------------------------------------------------[INFO] BUILD SUCCESS[INFO] ------------------------------------------------------------------------[INFO] Total time:  5.175 s[INFO] Finished at: 2022-08-03T11:02:22+01:00[INFO] ------------------------------------------------------------------------</pre></div><p>Check if the target directory contains the new <code>*.jar</code> with dependencies:</p><div class=\"org-src-container\"><pre class=\"src src-shell\"> % ls -la targettotal 1184drwxr-xr-x  12 rv  staff     384 Aug  3 11:02 .drwxr-xr-x   6 rv  staff     192 Aug  2 15:11 ..drwxr-xr-x   2 rv  staff      64 Aug  2 14:56 archive-tmpdrwxr-xr-x   4 rv  staff     128 Aug  1 13:36 classes-rw-r--r--   1 rv  staff  561750 Aug  3 11:02 ftputil-0.2-jar-with-dependencies.jar-rw-r--r--   1 rv  staff   11491 Aug  2 15:11 ftputil-0.2.jardrwxr-xr-x   3 rv  staff      96 Jul 30 19:59 generated-sourcesdrwxr-xr-x   3 rv  staff      96 Jul 30 19:59 generated-test-sourcesdrwxr-xr-x   3 rv  staff      96 Jul 30 19:59 maven-archiverdrwxr-xr-x   3 rv  staff      96 Jul 30 19:59 maven-statusdrwxr-xr-x  10 rv  staff     320 Jul 30 19:59 surefire-reportsdrwxr-xr-x   3 rv  staff      96 Jul 30 19:59 test-classes</pre></div><p>Note the new output file <code>ftputil-0.2-jar-with-dependencies.jar</code>, this jar contains <code>ftputil</code> applicaiton and all its dependencies.</p></div></div><div id=\"outline-container-org932d974\" class=\"outline-2\"><h2 id=\"org932d974\">Example of using the jar archive with all dependencies</h2><div class=\"outline-text-2\" id=\"text-org932d974\"><p>We can use <code>jshell</code> environment to see differences between a default jar and one with all dependencies included.</p><p>In the following example, the objective is to use <code>FtpClient</code> to list files and directories on an FTP server.</p><p>First, we try to use the default <code>ftputil.jar</code>:</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% jshell|  Welcome to JShell -- Version 11.0.12|  For an introduction type: /help introjshell&gt; /env --class-path target/ftputil-0.2.jar|  Setting new options and restoring state.import ftputil.*;jshell&gt; FtpClient <span style=\"color: #E06C75;\">client</span> = FtpClient.getClient(<span style=\"color: #98C379;\">\"ftp.ebi.ac.uk\"</span>, new FTPClient());|  Error:|  cannot find symbol|    symbol:   class FTPClient|  FtpClient <span style=\"color: #E06C75;\">client</span> = FtpClient.getClient(<span style=\"color: #98C379;\">\"ftp.ebi.ac.uk\"</span>, new FTPClient());|                                                              ^-------^</pre></div><p>At this point <code>jshell</code> cannot find <code>FTPClient</code> class. If we try to resolve this by an appropriate <code>import</code> it still does not work since <code>apache commons net</code> library jar is not on the class path:</p><div class=\"org-src-container\"><pre class=\"src src-shell\">jshell&gt; import org.apache.commons.net.ftp.*;|  Error:|  package org.apache.commons.net.ftp does not exist|  import org.apache.commons.net.ftp.*;|  ^</pre></div><p>Now, we can load the uber-jar <code>ftputil-0.2-jar-with-dependencies.jar</code> and try again:</p><div class=\"org-src-container\"><pre class=\"src src-shell\">jshell&gt; /env --class-path target/ftputil-0.2-jar-with-dependencies.jar|  Setting new options and restoring state.jshell&gt; import org.apache.commons.net.ftp.*;jshell&gt; FtpClient <span style=\"color: #E06C75;\">client</span> = FtpClient.getClient(URI.create(<span style=\"color: #98C379;\">\"ftp.ebi.ac.uk\"</span>), new FTPClient());<span style=\"color: #E06C75;\">client</span> ==&gt; ftputil.FtpClient@a67c67e</pre></div><p>We have successfully loaded dependencies and created an <code>FtpClient</code> object. Now we can use it to list files and directories in <code>/pub</code>:</p><div class=\"org-src-container\"><pre class=\"src src-shell\">jshell&gt; client.listFiles(Path.of(<span style=\"color: #98C379;\">\"/pub/\"</span>)).forEach(System.out::println);lrwxrwxrwx    1 ftp      ftp            20 Jul 20  2012 blast -&gt; databases/ncbi/blastdrwxrwxr-x   68 ftp      ftp          1815 Jun 30 14:32 contribdrwxrwxr-x  207 ftp      ftp          5444 Jul 19 14:33 databasesdrwxrwxr-x    2 ftp      ftp          1466 Aug 29  2002 embnet.newsdrwxrwxr-x    2 ftp      ftp          1646 Feb 18  2021 helpdrwxr-x---    7 ftp      ftp          1114 May 15  2000 mirror-patch-testdrwxrwxr-x    2 ftp      ftp           149 Jul 14 14:17 phddrwxrwxr-x   34 ftp      ftp           946 Jul 15 13:31 softwaredrwxrwxr-x   16 ftp      ftp           335 Feb 14 15:51 trainingjshell&gt; client.close();</pre></div><hr /><p>Thank you.</p></div></div>",
            "url": "http://localhost:4000/2022/08/02/java-fundamentals-ftputil-uberjar",
            
            
            
            
            
            "date_published": "2022-08-02T12:11:27+01:00",
            "date_modified": "2022-08-02T12:11:27+01:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2022/08/02/java-fundamentals-ftputil-integrationtests",
            "title": "Writing integration tests for the ftp utility using <code>MockFtpServer</code>.",
            "summary": null,
            "content_text": "Toolkit: macOS | InelliJ IDEA | JUnit 5 | MockFtpServerSources: GitHubObjectivesTest FtpUtility  workflows against a functioning FTP server.Review the structureFinal result of running all intergation tests in IntelliJAdd dependencies to MockFtpServer in maven projectNote: MockFtpServer uses slf4j logging library. A dependency to it is added as well (although it is optional).&lt;dependencies&gt;  &lt;dependency&gt;    &lt;groupId&gt;org.mockftpserver&lt;/groupId&gt;    &lt;artifactId&gt;MockFtpServer&lt;/artifactId&gt;    &lt;version&gt;2.8.0&lt;/version&gt;  &lt;/dependency&gt;  &lt;dependency&gt;    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;    &lt;artifactId&gt;slf4j-simple&lt;/artifactId&gt;    &lt;version&gt;1.7.36&lt;/version&gt;  &lt;/dependency&gt;&lt;/dependencies&gt;Configure FakeFtpServer instance for each intergation testpublic class FtpClientIntegrationTest {    // we will have two files stored on FTP server    private final Path fileOnePath = Path.of(\"file_one.json\");    private final Path fileTwoPath = Path.of(\"file_two_json\");    // this is content of those files    private final String fileOneContent = \"{\\\"id\\\":\\\"1\\\",\\\"approvedSymbol\\\":\\\"AAA\\\"}\";    private final String fileTwoContent = \"{\\\"id\\\":\\\"2\\\",\\\"approvedSymbol\\\":\\\"BBB\\\"}\";    @Nested    @DisplayName(\"Given that an FTP server with accessible content is available\")    class testWithFTPServerAvailable {        // we will run the FTP on local host        private final URI server = URI.create(\"localhost\");        // with /pub/data directory        private final Path remoteBase = Path.of(\"/pub/\");        private final Path dataDir = Path.of(\"data\");        private FakeFtpServer fakeFtpServer;        @BeforeEach        public void setUp() {            // setup ftp server            fakeFtpServer = new FakeFtpServer();            // setup default account            UserAccount anonymous = new UserAccount();            anonymous.setPasswordRequiredForLogin(false);            anonymous.setUsername(\"anonymous\");            anonymous.setHomeDirectory(\"/\");            fakeFtpServer.addUserAccount(anonymous);            // setup sample directory and files structure            FileSystem fileSystem = new UnixFakeFileSystem();            fileSystem.add(new DirectoryEntry(remoteBase.toString()));            fileSystem.add(new FileEntry                           (remoteBase.resolve                            (dataDir.resolve(fileOnePath)).toString()                            , fileOneContent));            fileSystem.add(new FileEntry                           (remoteBase.resolve                            (dataDir.resolve(fileTwoPath)).toString()                            , fileTwoContent));            fakeFtpServer.setFileSystem(fileSystem);            fakeFtpServer.setSystemName(\"Unix\");            fakeFtpServer.start();        }        @AfterEach        public void tearDown() {            fakeFtpServer.stop();        }        /* more code */    }}Test connect + list files in a driectory workflow@Nested@DisplayName(\"When we connect with a new FtpClient instance\")public class testConnected {    @Test    @DisplayName(\"Then we can list files in a remote directory\")    public void testListOfFiles() {        try (var ftpClient = FtpClient.getClient(server, new FTPClient())) {            List&lt;FTPFile&gt; files = ftpClient                .listFiles(remoteBase.resolve(dataDir));            assertLinesMatch                (List.of(fileOnePath.toString(), fileTwoPath.toString())                 , files.stream().map(FTPFile::getName)                 .collect(Collectors.toList()));        } catch (IOException e) {            throw new RuntimeException(e);        }    }    /* more code */}Test connect + download all files in a directory workflow@Test@DisplayName(\"Then we can download content of all remote files in a directory\")public void testDownloadFiles() {    // create output streams for the content of remote files    Map&lt;Path, ByteArrayOutputStream&gt; outputStreams = Map.of        (fileOnePath, new ByteArrayOutputStream()         , fileTwoPath, new ByteArrayOutputStream());    // prepare outputProvider for the ftpClient    Function&lt;Path, OutputStream&gt; outputProvider = outputStreams::get;    // prepare reporter (empty)    Consumer&lt;String&gt; progressReporter = message -&gt; {};    try (var ftpClient = FtpClient.getClient(server, new FTPClient())) {        ftpClient.downloadAllFiles            (remoteBase.resolve(dataDir), outputProvider, progressReporter);        String downloadedFileOneContent = outputStreams.get(fileOnePath).toString();        String downloadedFileTwoContent = outputStreams.get(fileTwoPath).toString();        assertAll(\"Test that downloaded content is matching\"                  + \" what was uploaded to the FTP\"                  , () -&gt; assertLinesMatch                  (List.of(fileOneContent, fileTwoContent)                   , List.of(downloadedFileOneContent, downloadedFileTwoContent))                  );    } catch (IOException e) {        throw new RuntimeException(e);    }}Test connect + download a single file workflow@Test@DisplayName(\"Then we can download content of a remote file\")public void testDownloadSingleFile() {    // prepare output stream    var outputStream = new ByteArrayOutputStream();    try (var ftpClient = FtpClient.getClient(server, new FTPClient())) {        ftpClient.downloadFile            (remoteBase.resolve(dataDir).resolve(fileOnePath)             , outputStream);        String downloadedFileOneContent = outputStream.toString();        assertAll(\"Test that downloaded content is matching\"                  + \" what was uploaded to the FTP\"                  , () -&gt; assertLinesMatch                  (List.of(fileOneContent)                   , List.of(downloadedFileOneContent))                  );    } catch (IOException e) {        throw new RuntimeException(e);    }}Test cases for potential failures while interacting with an FTP serverTest the case when an FTP server refuses our attempt to connectAdditional FTP Mock Server configuration for the failure case@Nested@DisplayName(\"When server refuses our attempt to connect\")class connectionIsRefused {    @BeforeEach    public void setUp() {        // change response to the next Connect request        ConnectCommandHandler handler =            (ConnectCommandHandler) fakeFtpServer.getCommandHandler(\"Connect\");        handler.setReplyCode(534);        handler.setReplyMessageKey(\"Request denied for policy reasons.\");        handler.setReplyText(\"Request denied for policy reasons.\");    }    @AfterEach    public void resetServer() {        // this is not strictly necessary        // but will help to avoid errors if we switch        // to a single FTP server for all tests        fakeFtpServer.setCommandHandler            (\"Connect\", new ConnectCommandHandler());    }    /* more code */}Intergation test for the connect workflow@Test@DisplayName(\"Then the client throws Unable to connect... exception\")public void givenNewlyCreatedFTPClient_whenBadResponseOnConnect_thenException() {    // test connect() method    Throwable exception = assertThrows        (IOException.class         , () -&gt; FtpClient.getClient(server                                     , new FTPClient()                                     , fakeFtpServer.getServerControlPort()                                     , \"anonymous\", \"\")         , () -&gt; \"Return code 534 (not a positive completion)\"         + \" should cause an IOException\");    assertTrue(exception.getMessage().startsWith(\"Unable to connect\")               , () -&gt; \"FtpClient should throw an exception with \" +               \"'Unable to connect..' message in case of a negative connect reply\");}Test the case of trying to login with wrong credentials@Nested@DisplayName(\"When we login with a wrong user or password\")class loginIsRefused {    @Test    @DisplayName(\"Then the client throws Unable to login... exception\")    public void givenNewlyCreatedFTPClient_whenBadUserName_thenException() {        // bad username for the server        String badUserName = \"nonympus\";        Throwable exception = assertThrows            (IOException.class             , () -&gt; FtpClient.getClient(server                                         , new FTPClient()                                         , fakeFtpServer.getServerControlPort()                                         , badUserName, \"\")             , () -&gt; \"Return code 501 (Syntax error...) should cause an IOException\");        assertTrue(exception.getMessage().startsWith(\"Unable to login\")                   , () -&gt; \"FtpClient should throw an exception with \" +                   \"'Unable to login...' message in case of a negative login reply\");    }}Thank you.",
            "content_html": "<div class=\"post\"><p>Toolkit: macOS | <a href=\"https://www.jetbrains.com/idea/\">InelliJ IDEA</a> | <a href=\"https://junit.org/junit5/docs/current/user-guide/\">JUnit 5</a> | <a href=\"https://mockftpserver.org/\">MockFtpServer</a></p><p>Sources: <a href=\"https://github.com/rustam-isangulov/java.fundamentals\">GitHub</a></p></div><div id=\"outline-container-orgad583d2\" class=\"outline-2\"><h2 id=\"orgad583d2\">Objectives</h2><div class=\"outline-text-2\" id=\"text-orgad583d2\"><p>Test <a href=\"https://rustam-isangulov.github.io/2022/07/30/java-fundamentals-ftputil\">FtpUtility</a>  workflows against a functioning FTP server.</p></div></div><div id=\"outline-container-org4671eb2\" class=\"outline-2\"><h2 id=\"org4671eb2\">Review the structure</h2><div class=\"outline-text-2\" id=\"text-org4671eb2\"><div id=\"orgc86b307\" class=\"figure\"><p><img src=\"/images/ftputil-mockftp-structure.png\" alt=\"ftputil-mockftp-structure.png\" /></p></div><hr /></div></div><div id=\"outline-container-org415ff5c\" class=\"outline-2\"><h2 id=\"org415ff5c\">Final result of running all intergation tests in IntelliJ</h2><div class=\"outline-text-2\" id=\"text-org415ff5c\"><div id=\"org215b877\" class=\"figure\"><p><img src=\"/images/ftputil-mockftpserver-structure.jpg\" alt=\"ftputil-mockftpserver-structure.jpg\" /></p></div><hr /></div></div><div id=\"outline-container-org0bd4df1\" class=\"outline-2\"><h2 id=\"org0bd4df1\">Add dependencies to <code>MockFtpServer</code> in <code>maven</code> project</h2><div class=\"outline-text-2\" id=\"text-org0bd4df1\"><p><i>Note: <code>MockFtpServer</code> uses <code>slf4j</code> logging library. A dependency to it is added as well (although it is optional).</i></p><div class=\"org-src-container\"><pre class=\"src src-xml\">&lt;<span style=\"color: #E06C75;\">dependencies</span>&gt;  &lt;<span style=\"color: #E06C75;\">dependency</span>&gt;    &lt;<span style=\"color: #E06C75;\">groupId</span>&gt;org.mockftpserver&lt;/<span style=\"color: #E06C75;\">groupId</span>&gt;    &lt;<span style=\"color: #E06C75;\">artifactId</span>&gt;MockFtpServer&lt;/<span style=\"color: #E06C75;\">artifactId</span>&gt;    &lt;<span style=\"color: #E06C75;\">version</span>&gt;2.8.0&lt;/<span style=\"color: #E06C75;\">version</span>&gt;  &lt;/<span style=\"color: #E06C75;\">dependency</span>&gt;  &lt;<span style=\"color: #E06C75;\">dependency</span>&gt;    &lt;<span style=\"color: #E06C75;\">groupId</span>&gt;org.slf4j&lt;/<span style=\"color: #E06C75;\">groupId</span>&gt;    &lt;<span style=\"color: #E06C75;\">artifactId</span>&gt;slf4j-simple&lt;/<span style=\"color: #E06C75;\">artifactId</span>&gt;    &lt;<span style=\"color: #E06C75;\">version</span>&gt;1.7.36&lt;/<span style=\"color: #E06C75;\">version</span>&gt;  &lt;/<span style=\"color: #E06C75;\">dependency</span>&gt;&lt;/<span style=\"color: #E06C75;\">dependencies</span>&gt;</pre></div></div></div><div id=\"outline-container-org07e612f\" class=\"outline-2\"><h2 id=\"org07e612f\">Configure <code>FakeFtpServer</code> instance for each intergation test</h2><div class=\"outline-text-2\" id=\"text-org07e612f\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">FtpClientIntegrationTest</span> {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">we will have two files stored on FTP server</span>    <span style=\"color: #C678DD;\">private</span> <span style=\"color: #C678DD;\">final</span> <span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">fileOnePath</span> = Path.of(<span style=\"color: #98C379;\">\"file_one.json\"</span>);    <span style=\"color: #C678DD;\">private</span> <span style=\"color: #C678DD;\">final</span> <span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">fileTwoPath</span> = Path.of(<span style=\"color: #98C379;\">\"file_two_json\"</span>);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">this is content of those files</span>    <span style=\"color: #C678DD;\">private</span> <span style=\"color: #C678DD;\">final</span> <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">fileOneContent</span> = <span style=\"color: #98C379;\">\"{\\\"id\\\":\\\"1\\\",\\\"approvedSymbol\\\":\\\"AAA\\\"}\"</span>;    <span style=\"color: #C678DD;\">private</span> <span style=\"color: #C678DD;\">final</span> <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">fileTwoContent</span> = <span style=\"color: #98C379;\">\"{\\\"id\\\":\\\"2\\\",\\\"approvedSymbol\\\":\\\"BBB\\\"}\"</span>;    <span style=\"color: #56B6C2;\">@Nested</span>    <span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Given that an FTP server with accessible content is available\"</span>)    <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">testWithFTPServerAvailable</span> {        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">we will run the FTP on local host</span>        <span style=\"color: #C678DD;\">private</span> <span style=\"color: #C678DD;\">final</span> <span style=\"color: #E5C07B;\">URI</span> <span style=\"color: #E06C75;\">server</span> = URI.create(<span style=\"color: #98C379;\">\"localhost\"</span>);        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">with /pub/data directory</span>        <span style=\"color: #C678DD;\">private</span> <span style=\"color: #C678DD;\">final</span> <span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">remoteBase</span> = Path.of(<span style=\"color: #98C379;\">\"/pub/\"</span>);        <span style=\"color: #C678DD;\">private</span> <span style=\"color: #C678DD;\">final</span> <span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">dataDir</span> = Path.of(<span style=\"color: #98C379;\">\"data\"</span>);        <span style=\"color: #C678DD;\">private</span> <span style=\"color: #E5C07B;\">FakeFtpServer</span> <span style=\"color: #E06C75;\">fakeFtpServer</span>;        <span style=\"color: #56B6C2;\">@BeforeEach</span>        <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">setUp</span>() {            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">setup ftp server</span>            fakeFtpServer = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FakeFtpServer</span>();            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">setup default account</span>            <span style=\"color: #E5C07B;\">UserAccount</span> <span style=\"color: #E06C75;\">anonymous</span> = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">UserAccount</span>();            anonymous.setPasswordRequiredForLogin(<span style=\"color: #56B6C2;\">false</span>);            anonymous.setUsername(<span style=\"color: #98C379;\">\"anonymous\"</span>);            anonymous.setHomeDirectory(<span style=\"color: #98C379;\">\"/\"</span>);            fakeFtpServer.addUserAccount(anonymous);            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">setup sample directory and files structure</span>            <span style=\"color: #E5C07B;\">FileSystem</span> <span style=\"color: #E06C75;\">fileSystem</span> = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">UnixFakeFileSystem</span>();            fileSystem.add(<span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">DirectoryEntry</span>(remoteBase.toString()));            fileSystem.add(<span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FileEntry</span>                           (remoteBase.resolve                            (dataDir.resolve(fileOnePath)).toString()                            , fileOneContent));            fileSystem.add(<span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FileEntry</span>                           (remoteBase.resolve                            (dataDir.resolve(fileTwoPath)).toString()                            , fileTwoContent));            fakeFtpServer.setFileSystem(fileSystem);            fakeFtpServer.setSystemName(<span style=\"color: #98C379;\">\"Unix\"</span>);            fakeFtpServer.start();        }        <span style=\"color: #56B6C2;\">@AfterEach</span>        <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">tearDown</span>() {            fakeFtpServer.stop();        }        <span style=\"color: #5C6370; font-style: italic;\">/* </span><span style=\"color: #5C6370; font-style: italic;\">more code</span><span style=\"color: #5C6370; font-style: italic;\"> */</span>    }}</pre></div></div></div><div id=\"outline-container-orga4f9231\" class=\"outline-2\"><h2 id=\"orga4f9231\">Test <i>connect</i> + <i>list files in a driectory</i> workflow</h2><div class=\"outline-text-2\" id=\"text-orga4f9231\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Nested</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"When we connect with a new FtpClient instance\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">testConnected</span> {    <span style=\"color: #56B6C2;\">@Test</span>    <span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Then we can list files in a remote directory\"</span>)    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testListOfFiles</span>() {        <span style=\"color: #C678DD;\">try</span> (<span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">ftpClient</span> = FtpClient.getClient(server, <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FTPClient</span>())) {            <span style=\"color: #E5C07B;\">List</span>&lt;<span style=\"color: #E5C07B;\">FTPFile</span>&gt; <span style=\"color: #E06C75;\">files</span> = ftpClient                .listFiles(remoteBase.resolve(dataDir));            assertLinesMatch                (List.of(fileOnePath.toString(), fileTwoPath.toString())                 , files.stream().map(FTPFile::getName)                 .collect(Collectors.toList()));        } <span style=\"color: #C678DD;\">catch</span> (<span style=\"color: #E5C07B;\">IOException</span> <span style=\"color: #E06C75;\">e</span>) {            <span style=\"color: #C678DD;\">throw</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">RuntimeException</span>(e);        }    }    <span style=\"color: #5C6370; font-style: italic;\">/* </span><span style=\"color: #5C6370; font-style: italic;\">more code</span><span style=\"color: #5C6370; font-style: italic;\"> */</span>}</pre></div></div></div><div id=\"outline-container-orgcf78ede\" class=\"outline-2\"><h2 id=\"orgcf78ede\">Test <i>connect</i> + <i>download all files in a directory</i> workflow</h2><div class=\"outline-text-2\" id=\"text-orgcf78ede\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Test</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Then we can download content of all remote files in a directory\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testDownloadFiles</span>() {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">create output streams for the content of remote files</span>    <span style=\"color: #E5C07B;\">Map</span>&lt;<span style=\"color: #E5C07B;\">Path</span>, <span style=\"color: #E5C07B;\">ByteArrayOutputStream</span>&gt; <span style=\"color: #E06C75;\">outputStreams</span> = Map.of        (fileOnePath, <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">ByteArrayOutputStream</span>()         , fileTwoPath, <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">ByteArrayOutputStream</span>());    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">prepare outputProvider for the ftpClient</span>    <span style=\"color: #E5C07B;\">Function</span>&lt;<span style=\"color: #E5C07B;\">Path</span>, <span style=\"color: #E5C07B;\">OutputStream</span>&gt; <span style=\"color: #E06C75;\">outputProvider</span> = outputStreams::get;    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">prepare reporter (empty)</span>    <span style=\"color: #E5C07B;\">Consumer</span>&lt;<span style=\"color: #E5C07B;\">String</span>&gt; <span style=\"color: #E06C75;\">progressReporter</span> = message -&gt; {};    <span style=\"color: #C678DD;\">try</span> (<span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">ftpClient</span> = FtpClient.getClient(server, <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FTPClient</span>())) {        ftpClient.downloadAllFiles            (remoteBase.resolve(dataDir), outputProvider, progressReporter);        <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">downloadedFileOneContent</span> = outputStreams.get(fileOnePath).toString();        <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">downloadedFileTwoContent</span> = outputStreams.get(fileTwoPath).toString();        assertAll(<span style=\"color: #98C379;\">\"Test that downloaded content is matching\"</span>                  + <span style=\"color: #98C379;\">\" what was uploaded to the FTP\"</span>                  , () -&gt; assertLinesMatch                  (List.of(fileOneContent, fileTwoContent)                   , List.of(downloadedFileOneContent, downloadedFileTwoContent))                  );    } <span style=\"color: #C678DD;\">catch</span> (<span style=\"color: #E5C07B;\">IOException</span> <span style=\"color: #E06C75;\">e</span>) {        <span style=\"color: #C678DD;\">throw</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">RuntimeException</span>(e);    }}</pre></div></div></div><div id=\"outline-container-org6b05d20\" class=\"outline-2\"><h2 id=\"org6b05d20\">Test <i>connect</i> + <i>download a single file</i> workflow</h2><div class=\"outline-text-2\" id=\"text-org6b05d20\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Test</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Then we can download content of a remote file\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testDownloadSingleFile</span>() {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">prepare output stream</span>    <span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">outputStream</span> = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">ByteArrayOutputStream</span>();    <span style=\"color: #C678DD;\">try</span> (<span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">ftpClient</span> = FtpClient.getClient(server, <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FTPClient</span>())) {        ftpClient.downloadFile            (remoteBase.resolve(dataDir).resolve(fileOnePath)             , outputStream);        <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">downloadedFileOneContent</span> = outputStream.toString();        assertAll(<span style=\"color: #98C379;\">\"Test that downloaded content is matching\"</span>                  + <span style=\"color: #98C379;\">\" what was uploaded to the FTP\"</span>                  , () -&gt; assertLinesMatch                  (List.of(fileOneContent)                   , List.of(downloadedFileOneContent))                  );    } <span style=\"color: #C678DD;\">catch</span> (<span style=\"color: #E5C07B;\">IOException</span> <span style=\"color: #E06C75;\">e</span>) {        <span style=\"color: #C678DD;\">throw</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">RuntimeException</span>(e);    }}</pre></div></div></div><div id=\"outline-container-orgca3d5c1\" class=\"outline-2\"><h2 id=\"orgca3d5c1\">Test cases for potential failures while interacting with an FTP server</h2><div class=\"outline-text-2\" id=\"text-orgca3d5c1\"></div><div id=\"outline-container-orgcde2488\" class=\"outline-3\"><h3 id=\"orgcde2488\">Test the case when an FTP server refuses our attempt to connect</h3><div class=\"outline-text-3\" id=\"text-orgcde2488\"></div><div id=\"outline-container-org1a406cc\" class=\"outline-4\"><h4 id=\"org1a406cc\">Additional FTP Mock Server configuration for the failure case</h4><div class=\"outline-text-4\" id=\"text-org1a406cc\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Nested</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"When server refuses our attempt to connect\"</span>)<span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">connectionIsRefused</span> {    <span style=\"color: #56B6C2;\">@BeforeEach</span>    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">setUp</span>() {        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">change response to the next Connect request</span>        <span style=\"color: #E5C07B;\">ConnectCommandHandler</span> <span style=\"color: #E06C75;\">handler</span> =            (<span style=\"color: #E5C07B;\">ConnectCommandHandler</span>) fakeFtpServer.getCommandHandler(<span style=\"color: #98C379;\">\"Connect\"</span>);        handler.setReplyCode(534);        handler.setReplyMessageKey(<span style=\"color: #98C379;\">\"Request denied for policy reasons.\"</span>);        handler.setReplyText(<span style=\"color: #98C379;\">\"Request denied for policy reasons.\"</span>);    }    <span style=\"color: #56B6C2;\">@AfterEach</span>    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">resetServer</span>() {        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">this is not strictly necessary</span>        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">but will help to avoid errors if we switch</span>        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">to a single FTP server for all tests</span>        fakeFtpServer.setCommandHandler            (<span style=\"color: #98C379;\">\"Connect\"</span>, <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">ConnectCommandHandler</span>());    }    <span style=\"color: #5C6370; font-style: italic;\">/* </span><span style=\"color: #5C6370; font-style: italic;\">more code</span><span style=\"color: #5C6370; font-style: italic;\"> */</span>}</pre></div></div></div><div id=\"outline-container-org5e019df\" class=\"outline-4\"><h4 id=\"org5e019df\">Intergation test for the <i>connect</i> workflow</h4><div class=\"outline-text-4\" id=\"text-org5e019df\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Test</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Then the client throws Unable to connect... exception\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">givenNewlyCreatedFTPClient_whenBadResponseOnConnect_thenException</span>() {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">test connect() method</span>    <span style=\"color: #E5C07B;\">Throwable</span> <span style=\"color: #E06C75;\">exception</span> = assertThrows        (IOException.<span style=\"color: #C678DD;\">class</span>         , () -&gt; FtpClient.getClient(server                                     , <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FTPClient</span>()                                     , fakeFtpServer.getServerControlPort()                                     , <span style=\"color: #98C379;\">\"anonymous\"</span>, <span style=\"color: #98C379;\">\"\"</span>)         , () -&gt; <span style=\"color: #98C379;\">\"Return code 534 (not a positive completion)\"</span>         + <span style=\"color: #98C379;\">\" should cause an IOException\"</span>);    assertTrue(exception.getMessage().startsWith(<span style=\"color: #98C379;\">\"Unable to connect\"</span>)               , () -&gt; <span style=\"color: #98C379;\">\"FtpClient should throw an exception with \"</span> +               <span style=\"color: #98C379;\">\"'Unable to connect..' message in case of a negative connect reply\"</span>);}</pre></div></div></div></div><div id=\"outline-container-org98c6652\" class=\"outline-3\"><h3 id=\"org98c6652\">Test the case of trying to login with wrong credentials</h3><div class=\"outline-text-3\" id=\"text-org98c6652\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Nested</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"When we login with a wrong user or password\"</span>)<span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">loginIsRefused</span> {    <span style=\"color: #56B6C2;\">@Test</span>    <span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Then the client throws Unable to login... exception\"</span>)    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">givenNewlyCreatedFTPClient_whenBadUserName_thenException</span>() {        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">bad username for the server</span>        <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">badUserName</span> = <span style=\"color: #98C379;\">\"nonympus\"</span>;        <span style=\"color: #E5C07B;\">Throwable</span> <span style=\"color: #E06C75;\">exception</span> = assertThrows            (IOException.<span style=\"color: #C678DD;\">class</span>             , () -&gt; FtpClient.getClient(server                                         , <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FTPClient</span>()                                         , fakeFtpServer.getServerControlPort()                                         , badUserName, <span style=\"color: #98C379;\">\"\"</span>)             , () -&gt; <span style=\"color: #98C379;\">\"Return code 501 (Syntax error...) should cause an IOException\"</span>);        assertTrue(exception.getMessage().startsWith(<span style=\"color: #98C379;\">\"Unable to login\"</span>)                   , () -&gt; <span style=\"color: #98C379;\">\"FtpClient should throw an exception with \"</span> +                   <span style=\"color: #98C379;\">\"'Unable to login...' message in case of a negative login reply\"</span>);    }}</pre></div><hr /><p>Thank you.</p></div></div></div>",
            "url": "http://localhost:4000/2022/08/02/java-fundamentals-ftputil-integrationtests",
            
            
            
            
            
            "date_published": "2022-08-02T12:11:27+01:00",
            "date_modified": "2022-08-02T12:11:27+01:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2022/08/01/java-fundamentals-ftputil-unittests",
            "title": "Writing unit tests for the ftp utility using <code>JUnit 5</code> and <code>Mockito 4</code>.",
            "summary": null,
            "content_text": "Toolkit: macOS | InelliJ IDEA | JUnit 5 | Mockito 4Sources: GitHubObjectivesCreate unit tests for FtpUtility that provide 100% coverage for methods and code lines.Review the structureFinal result of running all unit tests in IntelliJAdd dependecies to JUnit and Mockito in maven projectpom.xml&lt;dependencies&gt;  &lt;dependency&gt;    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;    &lt;artifactId&gt;junit-jupiter-api&lt;/artifactId&gt;    &lt;version&gt;5.8.2&lt;/version&gt;    &lt;scope&gt;test&lt;/scope&gt;  &lt;/dependency&gt;  &lt;dependency&gt;    &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;    &lt;artifactId&gt;junit-jupiter-engine&lt;/artifactId&gt;    &lt;version&gt;5.8.2&lt;/version&gt;    &lt;scope&gt;test&lt;/scope&gt;  &lt;/dependency&gt;  &lt;dependency&gt;    &lt;groupId&gt;org.mockito&lt;/groupId&gt;    &lt;artifactId&gt;mockito-junit-jupiter&lt;/artifactId&gt;    &lt;version&gt;4.5.1&lt;/version&gt;    &lt;scope&gt;test&lt;/scope&gt;  &lt;/dependency&gt;&lt;/dependencies&gt;Add tests for open(...) and close(...) methodsAdd and initialise FTPClient and FtpClient objectspublic class FtpClientUnitTest {    @Nested    @DisplayName(\"Test successful ftp connection\")    public class openIfSuccessful {        private final FTPClient mockFTPClient = mock(FTPClient.class);        private FtpClient client;        private FTPFile[] ftpFiles;        @BeforeEach        public void setUp() throws IOException {            // set up a happy path for connecting / login sequence            when(mockFTPClient.getReplyCode())                .thenReturn(230);            when(mockFTPClient.login(anyString(), anyString()))                .thenReturn(true);            client = FtpClient.getClient                (URI.create(\"localhost\"), mockFTPClient);            /* more code */        }    }}Add open(...) method testCode to testprivate void open    (int port, String user, String password) throws IOException {    // connect    ftp.connect(server.toString(), port);    // check for connection failures    if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {        ftp.disconnect();        throw new IOException            (\"Unable to connect to FTP Server: \" + server             + \" port: \" + port);    }    // check for login failures    if (!ftp.login(user, password)) {        ftp.disconnect();        throw new IOException            (\"Unable to login to FTP Server: \" + server             + \" port: \" + port);    }    // passive mode to be able to work from inside VMs    ftp.enterLocalPassiveMode();    // now ready to access files and dirs}Unit test@Test@DisplayName(\"Test open connection sequence for default port/user\")public void testFTPOpenDefault() throws IOException {    // open connection should have three steps:    // connect to server @ port    verify(mockFTPClient).connect(\"localhost\", 21);    // log in with username anonymous and no password    verify(mockFTPClient).login(\"anonymous\", \"\");    // switch to passive mode to be able to work from VMs    // (behind NATs and port mapping)    verify(mockFTPClient).enterLocalPassiveMode();}Add close(...) method testCode to test@Overridepublic void close() throws IOException {    ftp.logout();    ftp.disconnect();}Unit test@Test@DisplayName(\"Test close sequence\")public void testFTPClose() throws IOException {    // close (as in Closeable interface)    client.close();    // order of calls verification    InOrder inOrder = inOrder(mockFTPClient);    inOrder.verify(mockFTPClient).logout();    inOrder.verify(mockFTPClient).disconnect();}Unsuccessful ftp connection behaviour tests for open(...)Connection problem test@Nested@DisplayName(\"Test unsuccessful open connection cases\")public class unsuccessfulCases {    private FTPClient mockFTPClient = mock(FTPClient.class);    @Test    @DisplayName(\"Test connect problem behaviour\")    public void testConnectProblem() throws IOException {        // set up a troublesome path for the connecting sequence        when(mockFTPClient.getReplyCode())            .thenReturn(534);        Throwable ex = assertThrows            (IOException.class             , () -&gt; FtpClient.getClient(URI.create(\"localhost\"), mockFTPClient)             , () -&gt; \"FtpClient should throw an exception\" +             \" when ftp return code is not positive\");    }    /* more code */}Login problem test@Nested@DisplayName(\"Test unsuccessful open connection cases\")public class unsuccessfulCases {    /* more code */    @Test    @DisplayName(\"Test login problem behaviour\")    public void testLoginProblem() throws IOException {        // set up a happy path for the connecting sequence        when(mockFTPClient.getReplyCode())            .thenReturn(230);        // but bad response for the login call        when(mockFTPClient.login(anyString(), anyString()))            .thenReturn(false);        Throwable ex = assertThrows            (IOException.class             , () -&gt; FtpClient.getClient(URI.create(\"localhost\"), mockFTPClient)             , () -&gt; \"FtpClient should throw an exception\"             + \" when ftp login is not successful\");    }}Add tests for listFiles(...), downloadFile(...) and downloadAllFiles(...) methodsMock file/directory behaviours for the FTPClient@Nested@DisplayName(\"Test successful ftp connection\")public class openIfSuccessful {    private final FTPClient mockFTPClient = mock(FTPClient.class);    private FtpClient client;    private FTPFile[] ftpFiles;    @BeforeEach    public void setUp() throws IOException {        /* more code */        // setup file content for the mock FTPClient        ftpFiles = new FTPFile[2];        ftpFiles[0] = new FTPFile();        ftpFiles[0].setName(\"fileOne.txt\");        ftpFiles[0].setType(FTPFile.FILE_TYPE);        ftpFiles[1] = new FTPFile();        ftpFiles[1].setName(\"fileTwo.txt\");        ftpFiles[1].setType(FTPFile.FILE_TYPE);        // mock FTPClient response for the list command        when(mockFTPClient.listFiles(anyString()))            .thenReturn(ftpFiles);    }}Add listFiles(...) method testCode to testpublic List&lt;FTPFile&gt; listFiles(Path remoteDir) throws IOException {    FTPFile[] files = ftp.listFiles(remoteDir.toString());    return Arrays.stream(files)        .collect(Collectors.toList());}Unit test@Test@DisplayName(\"Test list files call\")public void testFTPListFiles() throws IOException {    // get the list through FtpClient    List&lt;FTPFile&gt; list = client.listFiles(Path.of(\"/any/path\"));    assertLinesMatch(List.of(\"fileOne.txt\", \"fileTwo.txt\")                     , list.stream()                     .map(FTPFile::getName)                     .collect(Collectors.toList()));}Add downloadFile(...) method testCode to testpublic void downloadFile(Path remoteFile, OutputStream out) throws IOException {    ftp.retrieveFile(remoteFile.toString(), out);}Unit test@Test@DisplayName(\"Test downloading a file call\")public void testFTPDownloadFile(@TempDir Path dataDir) throws IOException {    // prepare an output stream to copy file content    var out = new FileOutputStream        (dataDir.resolve(\"test.txt\").toFile());    // try to download a file with the given path    client.downloadFile(Path.of(\"any/path\"), out);    verify(mockFTPClient).retrieveFile(\"any/path\", out);}Add downloadAllFiles(...) method testCode to testpublic void downloadAllFiles    (Path remoteDir     , Function&lt;Path, OutputStream&gt; outputProvider     , Consumer&lt;String&gt; progressReporter) throws IOException {    var files = ftp.listFiles(remoteDir.toString());    var filesList = Arrays.stream(files)        .filter(FTPFile::isFile)        .map(FTPFile::getName)        .collect(Collectors.toList());    for(int i = 0; i &lt; filesList.size(); i++) {        progressReporter.accept            (String.format(\"Downloading (%d of %d):[%s]\"                           , i+1, filesList.size(), filesList.get(i)));        try (var out = outputProvider.apply(Path.of(filesList.get(i)))) {            ftp.retrieveFile(remoteDir.resolve(filesList.get(i)).toString(), out);        }    }}Unit test@Test@DisplayName(\"Test downloadAllFiles call\")public void testFTPDownloadAllFiles() throws IOException {    // create a simple progress reporter    Consumer&lt;String&gt; progressReporter = mock(Consumer.class);    // create order verifier for the progress reporter mock    InOrder inOrderReporter = inOrder(progressReporter);    // create a simple output stream    OutputStream out = mock(OutputStream.class);    // create a simple output provider    Function&lt;Path, OutputStream&gt; outputProvider = mock(Function.class);    when(outputProvider.apply(any(Path.class))).thenReturn(out);    // create order verifier for the output provider mock    InOrder inOrderProvider = inOrder(outputProvider);    client.downloadAllFiles        (Path.of(\"/remote/path\"), outputProvider, progressReporter);    // check the download sequence    // get a list    verify(mockFTPClient).listFiles(\"/remote/path\");    // say \"I am downloading ...\" twice    inOrderReporter.verify(progressReporter)        .accept(\"Downloading (1 of 2):[fileOne.txt]\");    inOrderReporter.verify(progressReporter)        .accept(\"Downloading (2 of 2):[fileTwo.txt]\");    // get output stream to write to... twice    inOrderProvider.verify(outputProvider).apply(Path.of(\"fileOne.txt\"));    inOrderProvider.verify(outputProvider).apply(Path.of(\"fileTwo.txt\"));    // check if retrieveFile method has been called    verify(mockFTPClient).retrieveFile(\"/remote/path/fileOne.txt\", out);    verify(mockFTPClient).retrieveFile(\"/remote/path/fileTwo.txt\", out);}Add FtpClient::getClient(...) test for non-default port and user accountCode to testpublic static FtpClient getClient    (URI serverAddress, FTPClient ftp     , int port, String user, String password) throws IOException {    FtpClient client = new FtpClient(serverAddress, ftp);    client.open(port, user, password);    return client;}Unit test@Nested@DisplayName(\"When connecting with non-default port and user\")public class connectDetailed {    private final FTPClient mockFTPClient = mock(FTPClient.class);    @Test    @DisplayName(\"Test open connection sequence with port / user / password\")    public void testFTPOpenDetailed() throws IOException {        // set up a happy path for connecting / login sequence        when(mockFTPClient.getReplyCode())            .thenReturn(230);        when(mockFTPClient.login(any(), any()))            .thenReturn(true);        FtpClient client = FtpClient.getClient            (URI.create(\"ftp.server\"), mockFTPClient             , 22, \"userOne\", \"passwordSecret\");        // open connection should have three steps:        // connect to server @ port        verify(mockFTPClient).connect(\"ftp.server\", 22);        // log in with username anonymous and no password        verify(mockFTPClient).login(\"userOne\", \"passwordSecret\");        // switch to passive mode to be able to work from VMs        // (behind NATs and port mapping)        verify(mockFTPClient).enterLocalPassiveMode();    }}Thank you.",
            "content_html": "<div class=\"post\"><p>Toolkit: macOS | <a href=\"https://www.jetbrains.com/idea/\">InelliJ IDEA</a> | <a href=\"https://junit.org/junit5/docs/current/user-guide/\">JUnit 5</a> | <a href=\"https://site.mockito.org/\">Mockito 4</a></p><p>Sources: <a href=\"https://github.com/rustam-isangulov/java.fundamentals\">GitHub</a></p></div><div id=\"outline-container-org2302018\" class=\"outline-2\"><h2 id=\"org2302018\">Objectives</h2><div class=\"outline-text-2\" id=\"text-org2302018\"><p>Create unit tests for <a href=\"https://rustam-isangulov.github.io/2022/07/30/java-fundamentals-ftputil\">FtpUtility</a> that provide 100% coverage for methods and code lines.</p></div></div><div id=\"outline-container-org40b7ec0\" class=\"outline-2\"><h2 id=\"org40b7ec0\">Review the structure</h2><div class=\"outline-text-2\" id=\"text-org40b7ec0\"><div id=\"org50610f3\" class=\"figure\"><p><img src=\"/images/ftputil-structure.png\" alt=\"ftputil-structure.png\" /></p></div><hr /></div></div><div id=\"outline-container-org821a978\" class=\"outline-2\"><h2 id=\"org821a978\">Final result of running all unit tests in IntelliJ</h2><div class=\"outline-text-2\" id=\"text-org821a978\"><div id=\"orgb2a15d9\" class=\"figure\"><p><img src=\"/images/ftputil-unittests-result.jpg\" alt=\"ftputil-unittests-result.jpg\" /></p></div><hr /></div></div><div id=\"outline-container-orge2a85d2\" class=\"outline-2\"><h2 id=\"orge2a85d2\">Add dependecies to <code>JUnit</code> and <code>Mockito</code> in <code>maven</code> project</h2><div class=\"outline-text-2\" id=\"text-orge2a85d2\"></div><div id=\"outline-container-org02b7062\" class=\"outline-3\"><h3 id=\"org02b7062\"><code>pom.xml</code></h3><div class=\"outline-text-3\" id=\"text-org02b7062\"><div class=\"org-src-container\"><pre class=\"src src-xml\">&lt;<span style=\"color: #E06C75;\">dependencies</span>&gt;  &lt;<span style=\"color: #E06C75;\">dependency</span>&gt;    &lt;<span style=\"color: #E06C75;\">groupId</span>&gt;org.junit.jupiter&lt;/<span style=\"color: #E06C75;\">groupId</span>&gt;    &lt;<span style=\"color: #E06C75;\">artifactId</span>&gt;junit-jupiter-api&lt;/<span style=\"color: #E06C75;\">artifactId</span>&gt;    &lt;<span style=\"color: #E06C75;\">version</span>&gt;5.8.2&lt;/<span style=\"color: #E06C75;\">version</span>&gt;    &lt;<span style=\"color: #E06C75;\">scope</span>&gt;test&lt;/<span style=\"color: #E06C75;\">scope</span>&gt;  &lt;/<span style=\"color: #E06C75;\">dependency</span>&gt;  &lt;<span style=\"color: #E06C75;\">dependency</span>&gt;    &lt;<span style=\"color: #E06C75;\">groupId</span>&gt;org.junit.jupiter&lt;/<span style=\"color: #E06C75;\">groupId</span>&gt;    &lt;<span style=\"color: #E06C75;\">artifactId</span>&gt;junit-jupiter-engine&lt;/<span style=\"color: #E06C75;\">artifactId</span>&gt;    &lt;<span style=\"color: #E06C75;\">version</span>&gt;5.8.2&lt;/<span style=\"color: #E06C75;\">version</span>&gt;    &lt;<span style=\"color: #E06C75;\">scope</span>&gt;test&lt;/<span style=\"color: #E06C75;\">scope</span>&gt;  &lt;/<span style=\"color: #E06C75;\">dependency</span>&gt;  &lt;<span style=\"color: #E06C75;\">dependency</span>&gt;    &lt;<span style=\"color: #E06C75;\">groupId</span>&gt;org.mockito&lt;/<span style=\"color: #E06C75;\">groupId</span>&gt;    &lt;<span style=\"color: #E06C75;\">artifactId</span>&gt;mockito-junit-jupiter&lt;/<span style=\"color: #E06C75;\">artifactId</span>&gt;    &lt;<span style=\"color: #E06C75;\">version</span>&gt;4.5.1&lt;/<span style=\"color: #E06C75;\">version</span>&gt;    &lt;<span style=\"color: #E06C75;\">scope</span>&gt;test&lt;/<span style=\"color: #E06C75;\">scope</span>&gt;  &lt;/<span style=\"color: #E06C75;\">dependency</span>&gt;&lt;/<span style=\"color: #E06C75;\">dependencies</span>&gt;</pre></div></div></div></div><div id=\"outline-container-orgce82da0\" class=\"outline-2\"><h2 id=\"orgce82da0\">Add tests for <code>open(...)</code> and <code>close(...)</code> methods</h2><div class=\"outline-text-2\" id=\"text-orgce82da0\"></div><div id=\"outline-container-org262e006\" class=\"outline-3\"><h3 id=\"org262e006\">Add and initialise <code>FTPClient</code> and <code>FtpClient</code> objects</h3><div class=\"outline-text-3\" id=\"text-org262e006\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">FtpClientUnitTest</span> {    <span style=\"color: #56B6C2;\">@Nested</span>    <span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Test successful ftp connection\"</span>)    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">openIfSuccessful</span> {        <span style=\"color: #C678DD;\">private</span> <span style=\"color: #C678DD;\">final</span> <span style=\"color: #E5C07B;\">FTPClient</span> <span style=\"color: #E06C75;\">mockFTPClient</span> = mock(FTPClient.<span style=\"color: #C678DD;\">class</span>);        <span style=\"color: #C678DD;\">private</span> <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #E06C75;\">client</span>;        <span style=\"color: #C678DD;\">private</span> <span style=\"color: #E5C07B;\">FTPFile</span>[] <span style=\"color: #E06C75;\">ftpFiles</span>;        <span style=\"color: #56B6C2;\">@BeforeEach</span>        <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">setUp</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">set up a happy path for connecting / login sequence</span>            when(mockFTPClient.getReplyCode())                .thenReturn(230);            when(mockFTPClient.login(anyString(), anyString()))                .thenReturn(<span style=\"color: #56B6C2;\">true</span>);            client = FtpClient.getClient                (URI.create(<span style=\"color: #98C379;\">\"localhost\"</span>), mockFTPClient);            <span style=\"color: #5C6370; font-style: italic;\">/* </span><span style=\"color: #5C6370; font-style: italic;\">more code</span><span style=\"color: #5C6370; font-style: italic;\"> */</span>        }    }}</pre></div></div></div><div id=\"outline-container-org4b7243f\" class=\"outline-3\"><h3 id=\"org4b7243f\">Add <code>open(...)</code> method test</h3><div class=\"outline-text-3\" id=\"text-org4b7243f\"></div><div id=\"outline-container-org85ecb8f\" class=\"outline-4\"><h4 id=\"org85ecb8f\">Code to test</h4><div class=\"outline-text-4\" id=\"text-org85ecb8f\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">private</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">open</span>    (<span style=\"color: #E5C07B;\">int</span> <span style=\"color: #E06C75;\">port</span>, <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">user</span>, <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">password</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">connect</span>    ftp.connect(server.toString(), port);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">check for connection failures</span>    <span style=\"color: #C678DD;\">if</span> (<span style=\"color: #56B6C2; font-weight: bold;\">!</span>FTPReply.isPositiveCompletion(ftp.getReplyCode())) {        ftp.disconnect();        <span style=\"color: #C678DD;\">throw</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">IOException</span>            (<span style=\"color: #98C379;\">\"Unable to connect to FTP Server: \"</span> + server             + <span style=\"color: #98C379;\">\" port: \"</span> + port);    }    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">check for login failures</span>    <span style=\"color: #C678DD;\">if</span> (<span style=\"color: #56B6C2; font-weight: bold;\">!</span>ftp.login(user, password)) {        ftp.disconnect();        <span style=\"color: #C678DD;\">throw</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">IOException</span>            (<span style=\"color: #98C379;\">\"Unable to login to FTP Server: \"</span> + server             + <span style=\"color: #98C379;\">\" port: \"</span> + port);    }    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">passive mode to be able to work from inside VMs</span>    ftp.enterLocalPassiveMode();    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">now ready to access files and dirs</span>}</pre></div></div></div><div id=\"outline-container-orgc0c9bb8\" class=\"outline-4\"><h4 id=\"orgc0c9bb8\">Unit test</h4><div class=\"outline-text-4\" id=\"text-orgc0c9bb8\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Test</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Test open connection sequence for default port/user\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testFTPOpenDefault</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">open connection should have three steps:</span>    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">connect to server @ port</span>    verify(mockFTPClient).connect(<span style=\"color: #98C379;\">\"localhost\"</span>, 21);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">log in with username anonymous and no password</span>    verify(mockFTPClient).login(<span style=\"color: #98C379;\">\"anonymous\"</span>, <span style=\"color: #98C379;\">\"\"</span>);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">switch to passive mode to be able to work from VMs</span>    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">(behind NATs and port mapping)</span>    verify(mockFTPClient).enterLocalPassiveMode();}</pre></div></div></div></div><div id=\"outline-container-orgb900234\" class=\"outline-3\"><h3 id=\"orgb900234\">Add <code>close(...)</code> method test</h3><div class=\"outline-text-3\" id=\"text-orgb900234\"></div><div id=\"outline-container-org9cbad84\" class=\"outline-4\"><h4 id=\"org9cbad84\">Code to test</h4><div class=\"outline-text-4\" id=\"text-org9cbad84\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Override</span><span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">close</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    ftp.logout();    ftp.disconnect();}</pre></div></div></div><div id=\"outline-container-org08994e4\" class=\"outline-4\"><h4 id=\"org08994e4\">Unit test</h4><div class=\"outline-text-4\" id=\"text-org08994e4\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Test</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Test close sequence\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testFTPClose</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">close (as in Closeable interface)</span>    client.close();    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">order of calls verification</span>    <span style=\"color: #E5C07B;\">InOrder</span> <span style=\"color: #E06C75;\">inOrder</span> = inOrder(mockFTPClient);    inOrder.verify(mockFTPClient).logout();    inOrder.verify(mockFTPClient).disconnect();}</pre></div></div></div></div><div id=\"outline-container-orga0ba5bf\" class=\"outline-3\"><h3 id=\"orga0ba5bf\">Unsuccessful ftp connection behaviour tests for <code>open(...)</code></h3><div class=\"outline-text-3\" id=\"text-orga0ba5bf\"></div><div id=\"outline-container-orgef23681\" class=\"outline-4\"><h4 id=\"orgef23681\">Connection problem test</h4><div class=\"outline-text-4\" id=\"text-orgef23681\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Nested</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Test unsuccessful open connection cases\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">unsuccessfulCases</span> {    <span style=\"color: #C678DD;\">private</span> <span style=\"color: #E5C07B;\">FTPClient</span> <span style=\"color: #E06C75;\">mockFTPClient</span> = mock(FTPClient.<span style=\"color: #C678DD;\">class</span>);    <span style=\"color: #56B6C2;\">@Test</span>    <span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Test connect problem behaviour\"</span>)    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testConnectProblem</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">set up a troublesome path for the connecting sequence</span>        when(mockFTPClient.getReplyCode())            .thenReturn(534);        <span style=\"color: #E5C07B;\">Throwable</span> <span style=\"color: #E06C75;\">ex</span> = assertThrows            (IOException.<span style=\"color: #C678DD;\">class</span>             , () -&gt; FtpClient.getClient(URI.create(<span style=\"color: #98C379;\">\"localhost\"</span>), mockFTPClient)             , () -&gt; <span style=\"color: #98C379;\">\"FtpClient should throw an exception\"</span> +             <span style=\"color: #98C379;\">\" when ftp return code is not positive\"</span>);    }    <span style=\"color: #5C6370; font-style: italic;\">/* </span><span style=\"color: #5C6370; font-style: italic;\">more code</span><span style=\"color: #5C6370; font-style: italic;\"> */</span>}</pre></div></div></div><div id=\"outline-container-orge0c153a\" class=\"outline-4\"><h4 id=\"orge0c153a\">Login problem test</h4><div class=\"outline-text-4\" id=\"text-orge0c153a\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Nested</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Test unsuccessful open connection cases\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">unsuccessfulCases</span> {    <span style=\"color: #5C6370; font-style: italic;\">/* </span><span style=\"color: #5C6370; font-style: italic;\">more code</span><span style=\"color: #5C6370; font-style: italic;\"> */</span>    <span style=\"color: #56B6C2;\">@Test</span>    <span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Test login problem behaviour\"</span>)    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testLoginProblem</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">set up a happy path for the connecting sequence</span>        when(mockFTPClient.getReplyCode())            .thenReturn(230);        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">but bad response for the login call</span>        when(mockFTPClient.login(anyString(), anyString()))            .thenReturn(<span style=\"color: #56B6C2;\">false</span>);        <span style=\"color: #E5C07B;\">Throwable</span> <span style=\"color: #E06C75;\">ex</span> = assertThrows            (IOException.<span style=\"color: #C678DD;\">class</span>             , () -&gt; FtpClient.getClient(URI.create(<span style=\"color: #98C379;\">\"localhost\"</span>), mockFTPClient)             , () -&gt; <span style=\"color: #98C379;\">\"FtpClient should throw an exception\"</span>             + <span style=\"color: #98C379;\">\" when ftp login is not successful\"</span>);    }}</pre></div></div></div></div></div><div id=\"outline-container-org639048c\" class=\"outline-2\"><h2 id=\"org639048c\">Add tests for <code>listFiles(...)</code>, <code>downloadFile(...)</code> and <code>downloadAllFiles(...)</code> methods</h2><div class=\"outline-text-2\" id=\"text-org639048c\"></div><div id=\"outline-container-orgaf0d85c\" class=\"outline-3\"><h3 id=\"orgaf0d85c\">Mock file/directory behaviours for the <code>FTPClient</code></h3><div class=\"outline-text-3\" id=\"text-orgaf0d85c\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Nested</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Test successful ftp connection\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">openIfSuccessful</span> {    <span style=\"color: #C678DD;\">private</span> <span style=\"color: #C678DD;\">final</span> <span style=\"color: #E5C07B;\">FTPClient</span> <span style=\"color: #E06C75;\">mockFTPClient</span> = mock(FTPClient.<span style=\"color: #C678DD;\">class</span>);    <span style=\"color: #C678DD;\">private</span> <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #E06C75;\">client</span>;    <span style=\"color: #C678DD;\">private</span> <span style=\"color: #E5C07B;\">FTPFile</span>[] <span style=\"color: #E06C75;\">ftpFiles</span>;    <span style=\"color: #56B6C2;\">@BeforeEach</span>    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">setUp</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {        <span style=\"color: #5C6370; font-style: italic;\">/* </span><span style=\"color: #5C6370; font-style: italic;\">more code</span><span style=\"color: #5C6370; font-style: italic;\"> */</span>        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">setup file content for the mock FTPClient</span>        ftpFiles = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FTPFile</span>[2];        ftpFiles[0] = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FTPFile</span>();        ftpFiles[0].setName(<span style=\"color: #98C379;\">\"fileOne.txt\"</span>);        ftpFiles[0].setType(<span style=\"color: #56B6C2;\">FTPFile</span>.FILE_TYPE);        ftpFiles[1] = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FTPFile</span>();        ftpFiles[1].setName(<span style=\"color: #98C379;\">\"fileTwo.txt\"</span>);        ftpFiles[1].setType(<span style=\"color: #56B6C2;\">FTPFile</span>.FILE_TYPE);        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">mock FTPClient response for the list command</span>        when(mockFTPClient.listFiles(anyString()))            .thenReturn(ftpFiles);    }}</pre></div></div></div><div id=\"outline-container-orga24e798\" class=\"outline-3\"><h3 id=\"orga24e798\">Add <code>listFiles(...)</code> method test</h3><div class=\"outline-text-3\" id=\"text-orga24e798\"></div><div id=\"outline-container-org4481803\" class=\"outline-4\"><h4 id=\"org4481803\">Code to test</h4><div class=\"outline-text-4\" id=\"text-org4481803\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">List</span>&lt;<span style=\"color: #E5C07B;\">FTPFile</span>&gt; <span style=\"color: #61AFEF;\">listFiles</span>(<span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">remoteDir</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #E5C07B;\">FTPFile</span>[] <span style=\"color: #E06C75;\">files</span> = ftp.listFiles(remoteDir.toString());    <span style=\"color: #C678DD;\">return</span> Arrays.stream(files)        .collect(Collectors.toList());}</pre></div></div></div><div id=\"outline-container-org937a209\" class=\"outline-4\"><h4 id=\"org937a209\">Unit test</h4><div class=\"outline-text-4\" id=\"text-org937a209\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Test</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Test list files call\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testFTPListFiles</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">get the list through FtpClient</span>    <span style=\"color: #E5C07B;\">List</span>&lt;<span style=\"color: #E5C07B;\">FTPFile</span>&gt; <span style=\"color: #E06C75;\">list</span> = client.listFiles(Path.of(<span style=\"color: #98C379;\">\"/any/path\"</span>));    assertLinesMatch(List.of(<span style=\"color: #98C379;\">\"fileOne.txt\"</span>, <span style=\"color: #98C379;\">\"fileTwo.txt\"</span>)                     , list.stream()                     .map(FTPFile::getName)                     .collect(Collectors.toList()));}</pre></div></div></div></div><div id=\"outline-container-org13c8c1b\" class=\"outline-3\"><h3 id=\"org13c8c1b\">Add <code>downloadFile(...)</code> method test</h3><div class=\"outline-text-3\" id=\"text-org13c8c1b\"></div><div id=\"outline-container-org3c37065\" class=\"outline-4\"><h4 id=\"org3c37065\">Code to test</h4><div class=\"outline-text-4\" id=\"text-org3c37065\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">downloadFile</span>(<span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">remoteFile</span>, <span style=\"color: #E5C07B;\">OutputStream</span> <span style=\"color: #E06C75;\">out</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    ftp.retrieveFile(remoteFile.toString(), out);}</pre></div></div></div><div id=\"outline-container-org822bb49\" class=\"outline-4\"><h4 id=\"org822bb49\">Unit test</h4><div class=\"outline-text-4\" id=\"text-org822bb49\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Test</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Test downloading a file call\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testFTPDownloadFile</span>(<span style=\"color: #56B6C2;\">@TempDir</span> <span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">dataDir</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">prepare an output stream to copy file content</span>    <span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">out</span> = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FileOutputStream</span>        (dataDir.resolve(<span style=\"color: #98C379;\">\"test.txt\"</span>).toFile());    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">try to download a file with the given path</span>    client.downloadFile(Path.of(<span style=\"color: #98C379;\">\"any/path\"</span>), out);    verify(mockFTPClient).retrieveFile(<span style=\"color: #98C379;\">\"any/path\"</span>, out);}</pre></div></div></div></div><div id=\"outline-container-org0f326a5\" class=\"outline-3\"><h3 id=\"org0f326a5\">Add <code>downloadAllFiles(...)</code> method test</h3><div class=\"outline-text-3\" id=\"text-org0f326a5\"></div><div id=\"outline-container-org3ff8abc\" class=\"outline-4\"><h4 id=\"org3ff8abc\">Code to test</h4><div class=\"outline-text-4\" id=\"text-org3ff8abc\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">downloadAllFiles</span>    (<span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">remoteDir</span>     , <span style=\"color: #E5C07B;\">Function</span>&lt;<span style=\"color: #E5C07B;\">Path</span>, <span style=\"color: #E5C07B;\">OutputStream</span>&gt; <span style=\"color: #E06C75;\">outputProvider</span>     , <span style=\"color: #E5C07B;\">Consumer</span>&lt;<span style=\"color: #E5C07B;\">String</span>&gt; <span style=\"color: #E06C75;\">progressReporter</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">files</span> = ftp.listFiles(remoteDir.toString());    <span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">filesList</span> = Arrays.stream(files)        .filter(FTPFile::isFile)        .map(FTPFile::getName)        .collect(Collectors.toList());    <span style=\"color: #C678DD;\">for</span>(<span style=\"color: #E5C07B;\">int</span> <span style=\"color: #E06C75;\">i</span> = 0; i &lt; filesList.<span style=\"color: #E5C07B;\">size</span>(); i++) {        progressReporter.accept            (String.format(<span style=\"color: #98C379;\">\"Downloading (%d of %d):[%s]\"</span>                           , i+1, filesList.size(), filesList.get(i)));        <span style=\"color: #C678DD;\">try</span> (<span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">out</span> = outputProvider.apply(Path.of(filesList.get(i)))) {            ftp.retrieveFile(remoteDir.resolve(filesList.get(i)).toString(), out);        }    }}</pre></div></div></div><div id=\"outline-container-orgdd90b01\" class=\"outline-4\"><h4 id=\"orgdd90b01\">Unit test</h4><div class=\"outline-text-4\" id=\"text-orgdd90b01\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Test</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Test downloadAllFiles call\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testFTPDownloadAllFiles</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">create a simple progress reporter</span>    <span style=\"color: #E5C07B;\">Consumer</span>&lt;<span style=\"color: #E5C07B;\">String</span>&gt; <span style=\"color: #E06C75;\">progressReporter</span> = mock(Consumer.<span style=\"color: #C678DD;\">class</span>);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">create order verifier for the progress reporter mock</span>    <span style=\"color: #E5C07B;\">InOrder</span> <span style=\"color: #E06C75;\">inOrderReporter</span> = inOrder(progressReporter);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">create a simple output stream</span>    <span style=\"color: #E5C07B;\">OutputStream</span> <span style=\"color: #E06C75;\">out</span> = mock(OutputStream.<span style=\"color: #C678DD;\">class</span>);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">create a simple output provider</span>    <span style=\"color: #E5C07B;\">Function</span>&lt;<span style=\"color: #E5C07B;\">Path</span>, <span style=\"color: #E5C07B;\">OutputStream</span>&gt; <span style=\"color: #E06C75;\">outputProvider</span> = mock(Function.<span style=\"color: #C678DD;\">class</span>);    when(outputProvider.apply(any(Path.<span style=\"color: #C678DD;\">class</span>))).thenReturn(out);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">create order verifier for the output provider mock</span>    <span style=\"color: #E5C07B;\">InOrder</span> <span style=\"color: #E06C75;\">inOrderProvider</span> = inOrder(outputProvider);    client.downloadAllFiles        (Path.of(<span style=\"color: #98C379;\">\"/remote/path\"</span>), outputProvider, progressReporter);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">check the download sequence</span>    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">get a list</span>    verify(mockFTPClient).listFiles(<span style=\"color: #98C379;\">\"/remote/path\"</span>);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">say \"I am downloading ...\" twice</span>    inOrderReporter.verify(progressReporter)        .accept(<span style=\"color: #98C379;\">\"Downloading (1 of 2):[fileOne.txt]\"</span>);    inOrderReporter.verify(progressReporter)        .accept(<span style=\"color: #98C379;\">\"Downloading (2 of 2):[fileTwo.txt]\"</span>);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">get output stream to write to... twice</span>    inOrderProvider.verify(outputProvider).apply(Path.of(<span style=\"color: #98C379;\">\"fileOne.txt\"</span>));    inOrderProvider.verify(outputProvider).apply(Path.of(<span style=\"color: #98C379;\">\"fileTwo.txt\"</span>));    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">check if retrieveFile method has been called</span>    verify(mockFTPClient).retrieveFile(<span style=\"color: #98C379;\">\"/remote/path/fileOne.txt\"</span>, out);    verify(mockFTPClient).retrieveFile(<span style=\"color: #98C379;\">\"/remote/path/fileTwo.txt\"</span>, out);}</pre></div></div></div></div></div><div id=\"outline-container-orgc7b529a\" class=\"outline-2\"><h2 id=\"orgc7b529a\">Add <code>FtpClient::getClient(...)</code> test for non-default port and user account</h2><div class=\"outline-text-2\" id=\"text-orgc7b529a\"></div><div id=\"outline-container-org3aa6951\" class=\"outline-4\"><h4 id=\"org3aa6951\">Code to test</h4><div class=\"outline-text-4\" id=\"text-org3aa6951\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #61AFEF;\">getClient</span>    (<span style=\"color: #E5C07B;\">URI</span> <span style=\"color: #E06C75;\">serverAddress</span>, <span style=\"color: #E5C07B;\">FTPClient</span> <span style=\"color: #E06C75;\">ftp</span>     , <span style=\"color: #E5C07B;\">int</span> <span style=\"color: #E06C75;\">port</span>, <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">user</span>, <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">password</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #E06C75;\">client</span> = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FtpClient</span>(serverAddress, ftp);    client.open(port, user, password);    <span style=\"color: #C678DD;\">return</span> client;}</pre></div></div></div><div id=\"outline-container-orgcbe4737\" class=\"outline-4\"><h4 id=\"orgcbe4737\">Unit test</h4><div class=\"outline-text-4\" id=\"text-orgcbe4737\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Nested</span><span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"When connecting with non-default port and user\"</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">connectDetailed</span> {    <span style=\"color: #C678DD;\">private</span> <span style=\"color: #C678DD;\">final</span> <span style=\"color: #E5C07B;\">FTPClient</span> <span style=\"color: #E06C75;\">mockFTPClient</span> = mock(FTPClient.<span style=\"color: #C678DD;\">class</span>);    <span style=\"color: #56B6C2;\">@Test</span>    <span style=\"color: #56B6C2;\">@DisplayName</span>(<span style=\"color: #98C379;\">\"Test open connection sequence with port / user / password\"</span>)    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testFTPOpenDetailed</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">set up a happy path for connecting / login sequence</span>        when(mockFTPClient.getReplyCode())            .thenReturn(230);        when(mockFTPClient.login(any(), any()))            .thenReturn(<span style=\"color: #56B6C2;\">true</span>);        <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #E06C75;\">client</span> = FtpClient.getClient            (URI.create(<span style=\"color: #98C379;\">\"ftp.server\"</span>), mockFTPClient             , 22, <span style=\"color: #98C379;\">\"userOne\"</span>, <span style=\"color: #98C379;\">\"passwordSecret\"</span>);        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">open connection should have three steps:</span>        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">connect to server @ port</span>        verify(mockFTPClient).connect(<span style=\"color: #98C379;\">\"ftp.server\"</span>, 22);        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">log in with username anonymous and no password</span>        verify(mockFTPClient).login(<span style=\"color: #98C379;\">\"userOne\"</span>, <span style=\"color: #98C379;\">\"passwordSecret\"</span>);        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">switch to passive mode to be able to work from VMs</span>        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">(behind NATs and port mapping)</span>        verify(mockFTPClient).enterLocalPassiveMode();    }}</pre></div><hr /><p>Thank you.</p></div></div></div>",
            "url": "http://localhost:4000/2022/08/01/java-fundamentals-ftputil-unittests",
            
            
            
            
            
            "date_published": "2022-08-01T12:11:27+01:00",
            "date_modified": "2022-08-01T12:11:27+01:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2022/07/30/java-fundamentals-ftputil",
            "title": "Creating an ftp utility using Apache Commons <code>FTPClient</code>.",
            "summary": null,
            "content_text": "Toolkit: macOS | InelliJ IDEA | Apache Commons NetSources: GitHubObjectivesCreate a utility to:download multiple(all) files from a directory on an ftp serverwork from inside container/VM environmentsNote: for the second objective FTPClient should be switched to local passive mode, see open(...) method for details.Review the structureAdd dependecies to Apache Commons in maven projectpom.xml&lt;dependencies&gt;  &lt;dependency&gt;    &lt;groupId&gt;commons-net&lt;/groupId&gt;    &lt;artifactId&gt;commons-net&lt;/artifactId&gt;    &lt;version&gt;3.8.0&lt;/version&gt;  &lt;/dependency&gt;&lt;/dependencies&gt;Add create instance and open connection logicIn this section we will add content for open/close connection method, constructor and instance factory methods.open(...)private void open(int port, String user, String password) throws IOException {    // connect    ftp.connect(server.toString(), port);    // check for connection failures    if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {        ftp.disconnect();        throw new IOException            (\"Unable to connect to FTP Server: \" + server             + \" port: \" + port);    }    // check for login failures    if (!ftp.login(user, password)) {        ftp.disconnect();        throw new IOException            (\"Unable to login to FTP Server: \" + server             + \" port: \" + port);    }    // passive mode to be able to work from inside VMs    ftp.enterLocalPassiveMode();    // now ready to access files and dirs}close()@Overridepublic void close() throws IOException {    ftp.logout();    ftp.disconnect();}FtpClient(...)private FtpClient(URI serverAddress, FTPClient ftp) {    this.server = serverAddress;    this.ftp = ftp;}getClient(...)public static FtpClient getClient    (URI serverAddress, FTPClient ftp) throws IOException {    // default port    int port = 21;    // username for public access data    String user = \"anonymous\";    // password for anonymous users    String password = \"\";    FtpClient client = new FtpClient(serverAddress, ftp);    client.open(port, user, password);    return client;}public static FtpClient getClient    (URI serverAddress, FTPClient ftp     , int port, String user, String password) throws IOException {    FtpClient client = new FtpClient(serverAddress, ftp);    client.open(port, user, password);    return client;}List files in a remote directoryIn this section we will add the logic to retrieve a list of files in a remote directory.listFiles(...)public List&lt;FTPFile&gt; listFiles(Path remoteDir) throws IOException {    FTPFile[] files = ftp.listFiles(remoteDir.toString());    return Arrays.stream(files)        .collect(Collectors.toList());}Download remote filesIn this section we will add content for remote files downloading methods, both single file and multple files versions.downloadFile(...)public void downloadFile    (Path remoteFile, OutputStream out) throws IOException {    ftp.retrieveFile(remoteFile.toString(), out);}downloadAllFiles(...)public void downloadAllFiles    (Path remoteDir     , Function&lt;Path, OutputStream&gt; outputProvider     , Consumer&lt;String&gt; progressReporter) throws IOException {    var files = ftp.listFiles(remoteDir.toString());    var filesList = Arrays.stream(files)        .filter(FTPFile::isFile)        .map(FTPFile::getName)        .collect(Collectors.toList());    for(int i = 0; i &lt; filesList.size(); i++) {        progressReporter.accept            (String.format(\"Downloading (%d of %d):[%s]\"                           , i+1, filesList.size(), filesList.get(i)));        try (var out = outputProvider.apply(Path.of(filesList.get(i)))) {            ftp.retrieveFile(remoteDir.resolve(filesList.get(i)).toString(), out);        }    }}ExampleHere is an example of using the FtpClient to list and download multiple files form an FTP server.public class FtiUtilRun {    public static void main(String... args) throws IOException {        // create and open connection        try (var ftpClient = FtpClient.getClient             (URI.create(\"ftp.ebi.ac.uk\"), new FTPClient())){            // remote directory            var remoteDir = Path.of                (\"/pub/databases/opentargets/\" +                 \"platform/latest/output/etl/json/diseases/\");            // print a list of files in a remote directory            ftpClient.listFiles(remoteDir)                .forEach(System.out::println);            // provide output stream to copy a remote file content into            Function&lt;Path, OutputStream&gt; outputProvider = file -&gt; {                try {                    return new BufferedOutputStream                       (new FileOutputStream(file.toFile()));                } catch (FileNotFoundException e) {                    throw new RuntimeException                        (\"Cannot create files in the local directory...\",e);                }            };            // progress reporter            Consumer&lt;String&gt; progressReporter = System.out::println;            // download all files in the directory            ftpClient.downloadAllFiles                (remoteDir, outputProvider, progressReporter);        }    }}Output:-rw-r--r--    1 ftp      ftp             0 Jun 20 12:03 _SUCCESS-rw-r--r--    1 ftp      ftp       1760417 Jun 20 12:03 part-00000-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1699456 Jun 20 12:03 part-00001-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1745262 Jun 20 12:03 part-00002-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1664693 Jun 20 12:03 part-00003-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2135641 Jun 20 12:03 part-00004-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2115169 Jun 20 12:03 part-00005-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2322320 Jun 20 12:03 part-00006-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2165083 Jun 20 12:03 part-00007-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1818603 Jun 20 12:03 part-00008-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1890536 Jun 20 12:03 part-00009-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1806820 Jun 20 12:03 part-00010-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2078683 Jun 20 12:03 part-00011-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        644630 Jun 20 12:03 part-00012-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        697469 Jun 20 12:03 part-00013-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        684315 Jun 20 12:03 part-00014-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        676954 Jun 20 12:03 part-00015-083c466a-3036-42e0-97ab-87035b32cc9b-c000.jsonDownloading (1 of 17):[_SUCCESS]Downloading (2 of 17):[part-00000-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (3 of 17):[part-00001-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (4 of 17):[part-00002-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (5 of 17):[part-00003-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (6 of 17):[part-00004-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (7 of 17):[part-00005-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (8 of 17):[part-00006-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (9 of 17):[part-00007-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (10 of 17):[part-00008-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (11 of 17):[part-00009-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (12 of 17):[part-00010-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (13 of 17):[part-00011-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (14 of 17):[part-00012-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (15 of 17):[part-00013-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (16 of 17):[part-00014-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (17 of 17):[part-00015-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Process finished with exit code 0Thank you.",
            "content_html": "<div class=\"post\"><p>Toolkit: macOS | <a href=\"https://www.jetbrains.com/idea/\">InelliJ IDEA</a> | <a href=\"https://commons.apache.org/proper/commons-net/\">Apache Commons Net</a></p><p>Sources: <a href=\"https://github.com/rustam-isangulov/java.fundamentals\">GitHub</a></p></div><div id=\"outline-container-org37d94e0\" class=\"outline-2\"><h2 id=\"org37d94e0\">Objectives</h2><div class=\"outline-text-2\" id=\"text-org37d94e0\"><p>Create a utility to:</p><ul class=\"org-ul\"><li>download multiple(all) files from a directory on an ftp server</li><li>work from inside container/VM environments</li></ul><p><i>Note: for the second objective <code>FTPClient</code> should be switched to <b>local passive mode</b>, see <code>open(...)</code> method for details.</i></p></div></div><div id=\"outline-container-orgde3cbdc\" class=\"outline-2\"><h2 id=\"orgde3cbdc\">Review the structure</h2><div class=\"outline-text-2\" id=\"text-orgde3cbdc\"><div id=\"org1f0106b\" class=\"figure\"><p><img src=\"/images/ftputil-structure.png\" alt=\"ftputil-structure.png\" /></p></div><hr /></div></div><div id=\"outline-container-org644ba1d\" class=\"outline-2\"><h2 id=\"org644ba1d\">Add dependecies to Apache Commons in <code>maven</code> project</h2><div class=\"outline-text-2\" id=\"text-org644ba1d\"></div><div id=\"outline-container-org6277511\" class=\"outline-3\"><h3 id=\"org6277511\"><code>pom.xml</code></h3><div class=\"outline-text-3\" id=\"text-org6277511\"><div class=\"org-src-container\"><pre class=\"src src-xml\">&lt;<span style=\"color: #E06C75;\">dependencies</span>&gt;  &lt;<span style=\"color: #E06C75;\">dependency</span>&gt;    &lt;<span style=\"color: #E06C75;\">groupId</span>&gt;commons-net&lt;/<span style=\"color: #E06C75;\">groupId</span>&gt;    &lt;<span style=\"color: #E06C75;\">artifactId</span>&gt;commons-net&lt;/<span style=\"color: #E06C75;\">artifactId</span>&gt;    &lt;<span style=\"color: #E06C75;\">version</span>&gt;3.8.0&lt;/<span style=\"color: #E06C75;\">version</span>&gt;  &lt;/<span style=\"color: #E06C75;\">dependency</span>&gt;&lt;/<span style=\"color: #E06C75;\">dependencies</span>&gt;</pre></div></div></div></div><div id=\"outline-container-org88760b3\" class=\"outline-2\"><h2 id=\"org88760b3\">Add create instance and open connection logic</h2><div class=\"outline-text-2\" id=\"text-org88760b3\"><p>In this section we will add content for open/close connection method, constructor and instance factory methods.</p></div><div id=\"outline-container-org401515b\" class=\"outline-3\"><h3 id=\"org401515b\"><code>open(...)</code></h3><div class=\"outline-text-3\" id=\"text-org401515b\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">private</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">open</span>(<span style=\"color: #E5C07B;\">int</span> <span style=\"color: #E06C75;\">port</span>, <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">user</span>, <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">password</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">connect</span>    ftp.connect(server.toString(), port);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">check for connection failures</span>    <span style=\"color: #C678DD;\">if</span> (<span style=\"color: #56B6C2; font-weight: bold;\">!</span>FTPReply.isPositiveCompletion(ftp.getReplyCode())) {        ftp.disconnect();        <span style=\"color: #C678DD;\">throw</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">IOException</span>            (<span style=\"color: #98C379;\">\"Unable to connect to FTP Server: \"</span> + server             + <span style=\"color: #98C379;\">\" port: \"</span> + port);    }    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">check for login failures</span>    <span style=\"color: #C678DD;\">if</span> (<span style=\"color: #56B6C2; font-weight: bold;\">!</span>ftp.login(user, password)) {        ftp.disconnect();        <span style=\"color: #C678DD;\">throw</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">IOException</span>            (<span style=\"color: #98C379;\">\"Unable to login to FTP Server: \"</span> + server             + <span style=\"color: #98C379;\">\" port: \"</span> + port);    }    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">passive mode to be able to work from inside VMs</span>    ftp.enterLocalPassiveMode();    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">now ready to access files and dirs</span>}</pre></div></div></div><div id=\"outline-container-org7ce3ae7\" class=\"outline-3\"><h3 id=\"org7ce3ae7\"><code>close()</code></h3><div class=\"outline-text-3\" id=\"text-org7ce3ae7\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Override</span><span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">close</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    ftp.logout();    ftp.disconnect();}</pre></div></div></div><div id=\"outline-container-org85215df\" class=\"outline-3\"><h3 id=\"org85215df\"><code>FtpClient(...)</code></h3><div class=\"outline-text-3\" id=\"text-org85215df\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">private</span> <span style=\"color: #61AFEF;\">FtpClient</span>(<span style=\"color: #E5C07B;\">URI</span> <span style=\"color: #E06C75;\">serverAddress</span>, <span style=\"color: #E5C07B;\">FTPClient</span> <span style=\"color: #E06C75;\">ftp</span>) {    <span style=\"color: #C678DD;\">this</span>.server = serverAddress;    <span style=\"color: #C678DD;\">this</span>.ftp = ftp;}</pre></div></div></div><div id=\"outline-container-orgea1c41b\" class=\"outline-3\"><h3 id=\"orgea1c41b\"><code>getClient(...)</code></h3><div class=\"outline-text-3\" id=\"text-orgea1c41b\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #61AFEF;\">getClient</span>    (<span style=\"color: #E5C07B;\">URI</span> <span style=\"color: #E06C75;\">serverAddress</span>, <span style=\"color: #E5C07B;\">FTPClient</span> <span style=\"color: #E06C75;\">ftp</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">default port</span>    <span style=\"color: #E5C07B;\">int</span> <span style=\"color: #E06C75;\">port</span> = 21;    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">username for public access data</span>    <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">user</span> = <span style=\"color: #98C379;\">\"anonymous\"</span>;    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">password for anonymous users</span>    <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">password</span> = <span style=\"color: #98C379;\">\"\"</span>;    <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #E06C75;\">client</span> = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FtpClient</span>(serverAddress, ftp);    client.open(port, user, password);    <span style=\"color: #C678DD;\">return</span> client;}<span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #61AFEF;\">getClient</span>    (<span style=\"color: #E5C07B;\">URI</span> <span style=\"color: #E06C75;\">serverAddress</span>, <span style=\"color: #E5C07B;\">FTPClient</span> <span style=\"color: #E06C75;\">ftp</span>     , <span style=\"color: #E5C07B;\">int</span> <span style=\"color: #E06C75;\">port</span>, <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">user</span>, <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">password</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #E06C75;\">client</span> = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FtpClient</span>(serverAddress, ftp);    client.open(port, user, password);    <span style=\"color: #C678DD;\">return</span> client;}</pre></div></div></div></div><div id=\"outline-container-org3d9420e\" class=\"outline-2\"><h2 id=\"org3d9420e\">List files in a remote directory</h2><div class=\"outline-text-2\" id=\"text-org3d9420e\"><p>In this section we will add the logic to retrieve a list of files in a remote directory.</p></div><div id=\"outline-container-orga027393\" class=\"outline-3\"><h3 id=\"orga027393\"><code>listFiles(...)</code></h3><div class=\"outline-text-3\" id=\"text-orga027393\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">List</span>&lt;<span style=\"color: #E5C07B;\">FTPFile</span>&gt; <span style=\"color: #61AFEF;\">listFiles</span>(<span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">remoteDir</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #E5C07B;\">FTPFile</span>[] <span style=\"color: #E06C75;\">files</span> = ftp.listFiles(remoteDir.toString());    <span style=\"color: #C678DD;\">return</span> Arrays.stream(files)        .collect(Collectors.toList());}</pre></div></div></div></div><div id=\"outline-container-orga6f6f3f\" class=\"outline-2\"><h2 id=\"orga6f6f3f\">Download remote files</h2><div class=\"outline-text-2\" id=\"text-orga6f6f3f\"><p>In this section we will add content for remote files downloading methods, both single file and multple files versions.</p></div><div id=\"outline-container-org149a8f9\" class=\"outline-3\"><h3 id=\"org149a8f9\"><code>downloadFile(...)</code></h3><div class=\"outline-text-3\" id=\"text-org149a8f9\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">downloadFile</span>    (<span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">remoteFile</span>, <span style=\"color: #E5C07B;\">OutputStream</span> <span style=\"color: #E06C75;\">out</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    ftp.retrieveFile(remoteFile.toString(), out);}</pre></div></div></div><div id=\"outline-container-org84ef305\" class=\"outline-3\"><h3 id=\"org84ef305\"><code>downloadAllFiles(...)</code></h3><div class=\"outline-text-3\" id=\"text-org84ef305\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">downloadAllFiles</span>    (<span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">remoteDir</span>     , <span style=\"color: #E5C07B;\">Function</span>&lt;<span style=\"color: #E5C07B;\">Path</span>, <span style=\"color: #E5C07B;\">OutputStream</span>&gt; <span style=\"color: #E06C75;\">outputProvider</span>     , <span style=\"color: #E5C07B;\">Consumer</span>&lt;<span style=\"color: #E5C07B;\">String</span>&gt; <span style=\"color: #E06C75;\">progressReporter</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">files</span> = ftp.listFiles(remoteDir.toString());    <span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">filesList</span> = Arrays.stream(files)        .filter(FTPFile::isFile)        .map(FTPFile::getName)        .collect(Collectors.toList());    <span style=\"color: #C678DD;\">for</span>(<span style=\"color: #E5C07B;\">int</span> <span style=\"color: #E06C75;\">i</span> = 0; i &lt; filesList.<span style=\"color: #E5C07B;\">size</span>(); i++) {        progressReporter.accept            (String.format(<span style=\"color: #98C379;\">\"Downloading (%d of %d):[%s]\"</span>                           , i+1, filesList.size(), filesList.get(i)));        <span style=\"color: #C678DD;\">try</span> (<span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">out</span> = outputProvider.apply(Path.of(filesList.get(i)))) {            ftp.retrieveFile(remoteDir.resolve(filesList.get(i)).toString(), out);        }    }}</pre></div></div></div></div><div id=\"outline-container-org9c37ca7\" class=\"outline-2\"><h2 id=\"org9c37ca7\">Example</h2><div class=\"outline-text-2\" id=\"text-org9c37ca7\"><p>Here is an example of using the <code>FtpClient</code> to list and download multiple files form an FTP server.</p><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">FtiUtilRun</span> {    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">main</span>(<span style=\"color: #E5C07B;\">String</span>... <span style=\"color: #E06C75;\">args</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">create and open connection</span>        <span style=\"color: #C678DD;\">try</span> (<span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">ftpClient</span> = FtpClient.getClient             (URI.create(<span style=\"color: #98C379;\">\"ftp.ebi.ac.uk\"</span>), <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FTPClient</span>())){            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">remote directory</span>            <span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">remoteDir</span> = Path.of                (<span style=\"color: #98C379;\">\"/pub/databases/opentargets/\"</span> +                 <span style=\"color: #98C379;\">\"platform/latest/output/etl/json/diseases/\"</span>);            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">print a list of files in a remote directory</span>            ftpClient.listFiles(remoteDir)                .forEach(System.out::println);            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">provide output stream to copy a remote file content into</span>            <span style=\"color: #E5C07B;\">Function</span>&lt;<span style=\"color: #E5C07B;\">Path</span>, <span style=\"color: #E5C07B;\">OutputStream</span>&gt; <span style=\"color: #E06C75;\">outputProvider</span> = file -&gt; {                <span style=\"color: #C678DD;\">try</span> {                    <span style=\"color: #C678DD;\">return</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">BufferedOutputStream</span>                       (<span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FileOutputStream</span>(file.toFile()));                } <span style=\"color: #C678DD;\">catch</span> (<span style=\"color: #E5C07B;\">FileNotFoundException</span> <span style=\"color: #E06C75;\">e</span>) {                    <span style=\"color: #C678DD;\">throw</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">RuntimeException</span>                        (<span style=\"color: #98C379;\">\"Cannot create files in the local directory...\"</span>,e);                }            };            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">progress reporter</span>            <span style=\"color: #E5C07B;\">Consumer</span>&lt;<span style=\"color: #E5C07B;\">String</span>&gt; <span style=\"color: #E06C75;\">progressReporter</span> = System.out::println;            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">download all files in the directory</span>            ftpClient.downloadAllFiles                (remoteDir, outputProvider, progressReporter);        }    }}</pre></div><p>Output:</p><div class=\"org-src-container\"><pre class=\"src src-shell\">-rw-r--r--    1 ftp      ftp             0 Jun 20 12:03 _SUCCESS-rw-r--r--    1 ftp      ftp       1760417 Jun 20 12:03 part-00000-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1699456 Jun 20 12:03 part-00001-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1745262 Jun 20 12:03 part-00002-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1664693 Jun 20 12:03 part-00003-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2135641 Jun 20 12:03 part-00004-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2115169 Jun 20 12:03 part-00005-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2322320 Jun 20 12:03 part-00006-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2165083 Jun 20 12:03 part-00007-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1818603 Jun 20 12:03 part-00008-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1890536 Jun 20 12:03 part-00009-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1806820 Jun 20 12:03 part-00010-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2078683 Jun 20 12:03 part-00011-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        644630 Jun 20 12:03 part-00012-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        697469 Jun 20 12:03 part-00013-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        684315 Jun 20 12:03 part-00014-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        676954 Jun 20 12:03 part-00015-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json<span style=\"color: #61AFEF;\">Downloading</span> (1 of 17):[_SUCCESS]<span style=\"color: #61AFEF;\">Downloading</span> (2 of 17):[part-00000-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (3 of 17):[part-00001-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (4 of 17):[part-00002-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (5 of 17):[part-00003-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (6 of 17):[part-00004-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (7 of 17):[part-00005-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (8 of 17):[part-00006-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (9 of 17):[part-00007-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (10 of 17):[part-00008-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (11 of 17):[part-00009-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (12 of 17):[part-00010-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (13 of 17):[part-00011-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (14 of 17):[part-00012-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (15 of 17):[part-00013-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (16 of 17):[part-00014-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (17 of 17):[part-00015-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Process finished with exit code 0</pre></div><hr /><p>Thank you.</p></div></div>",
            "url": "http://localhost:4000/2022/07/30/java-fundamentals-ftputil",
            
            
            
            
            
            "date_published": "2022-07-30T12:11:27+01:00",
            "date_modified": "2022-07-30T12:11:27+01:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2022/06/29/css-debugging-html",
            "title": "Using CSS <code>outline</code> property to visualise the structure of an html page.",
            "summary": null,
            "content_text": "Language: CSSTechniqueTo identify discrepancies in placement of html elements you can add CSS outline property to make their contours visible as follows.div {    outline: 1px solid blue;}Below is an example of using the property to see contours of &lt;div&gt; and &lt;p&gt; elements.  See the Pen   Outline elements by Rustam (@rustam-isangulov)  on CodePen.ExampleBelow is an example of using this technique for a blog post \"debugging\".",
            "content_html": "<div class=\"post\"><p>Language: CSS</p></div><div id=\"outline-container-org02933f8\" class=\"outline-2\"><h3 id=\"org02933f8\">Technique</h3><div class=\"outline-text-2\" id=\"text-org02933f8\"><p>To identify discrepancies in placement of html elements you can add <i>CSS</i> <code>outline</code> property to make their contours visible as follows.</p><div class=\"org-src-container\"><pre class=\"src src-css\"><span style=\"color: #61AFEF;\">div </span>{    <span style=\"color: #C678DD;\">outline</span>: 1px solid <span style=\"color: #ffffff; background-color: #0000ff;\">blue</span>;}</pre></div><p>Below is an example of using the property to see contours of <code>&lt;div&gt;</code> and <code>&lt;p&gt;</code> elements.</p><p class=\"codepen\" data-height=\"360\" data-default-tab=\"html,result\" data-slug-hash=\"xxWxNEq\" data-user=\"rustam-isangulov\" style=\"height: 360px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">  <span>See the Pen <a href=\"https://codepen.io/rustam-isangulov/pen/xxWxNEq\">  Outline elements</a> by Rustam (<a href=\"https://codepen.io/rustam-isangulov\">@rustam-isangulov</a>)  on <a href=\"https://codepen.io\">CodePen</a>.</span></p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script><p></p></div></div><div id=\"outline-container-org237cc94\" class=\"outline-2\"><h3 id=\"org237cc94\">Example</h3><div class=\"outline-text-2\" id=\"text-org237cc94\"><p>Below is an example of using this technique for a blog post \"debugging\".</p><p><img src=\"/images/CSS-clean.jpg\" alt=\"CSS-clean.jpg\" /><img src=\"/images/CSS-outline.jpg\" alt=\"CSS-outline.jpg\" /></p><hr /></div></div>",
            "url": "http://localhost:4000/2022/06/29/css-debugging-html",
            
            
            
            
            
            "date_published": "2022-06-29T12:00:03+01:00",
            "date_modified": "2022-06-29T12:00:03+01:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2022/06/27/html-is-possible",
            "title": "Creating an elementary spring web app and deplying it in a Multipass Docker environment",
            "summary": null,
            "content_text": "Toolkit: macOS | InelliJ IDEA | Docker Desktop | MultipassSources: GitHubReview the structure of a static spring web appCreate a basic spring web appCreate spring project with spring initializrNavigate to https:start.spring.io and select following options:Project: Maven ProjectLanguage: JavaSpring Boot: 2.7.1Project Metadata:Artifact: \"springboot_ elementary\"Descripton: \"Elementary project for Spring Boot\"Packaging: JarJava: 11Dependencies: Spring WebUse \"GENERATE\" button to download an archive with the new project. Unzip the archive and move springboot_ elementary folder to a development area.Open the new project with IntelliJ and let dependencies to be downloaded. Specify run configuration with application name and main class through Run -&gt; Run... menu as follows.Now you can build and run the app using IntelliJ, for example using Run -&gt; Run or Build -&gt; Build Project menus.Add controller classCreate a new package controllers under com.example.springboot_elementary folder. Add HomeController class in this package as follows.@Controllerpublic class HomeController {    @GetMapping(\"/\")    public String home() {        return \"home.html\";    }}Add static html sourceCreate a new home.html file under src/main/resources/static folder with the following content.&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"  xmlns=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt;    &lt;meta charset=\"UTF-8\"&gt;    &lt;title&gt;Spring web app&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;h2&gt;Home page for the Spring web app...&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;Add controller test classCreate a new package controllers in src/test/java/com.example.springboot_elementary. Add HomeControllerTest class with content as below.// additional static imports for MockMvc methodsimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;@WebMvcTest(HomeController.class)public class HomeControllerTest {    @Autowired    private MockMvc mockMvc;    @Test    public void testHomePage() throws Exception {        mockMvc.perform(get(\"/\"))                .andExpect(status().isOk())                .andExpect(view().name(\"home.html\"));    }}Run the app locallyNow you can build and run the app with the final project structure as follows.Run the app with IntelliJ using Run -&gt; Run 'springboot_ elementary' menu. Open a browser and navigate to localhost:8080 to validate that the app is up and running as in the example below.Deploy the app as a Docker container locallyReview the structure of a local Docker deploymentAdd image name pattern to maven project configurationAdd image configuration to spring-boot-maven-plugin in pom.xml, and re-Load Maven Changes as follows.This is to set the name template for docker images.&lt;build&gt;  &lt;plugins&gt;    &lt;plugin&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;      &lt;configuration&gt;        &lt;image&gt; &lt;name&gt;${project.artifactId}:${project.version}&lt;/name&gt;        &lt;/image&gt;      &lt;/configuration&gt;    &lt;/plugin&gt;  &lt;/plugins&gt;&lt;/build&gt;Create a Docker imageLaunch Docker Desktop app.Switch to Terminal panel in IntelliJ through View -&gt; Tool Windows -&gt; Terminal. Run image building script as follows.% ./mvnw spring-boot:build-imageCheck that the docker image has been created.% docker image list springboot_elementaryREPOSITORY              TAG              IMAGE ID       CREATED        SIZEspringboot_elementary   0.0.1-SNAPSHOT   d24fd8f3e812   42 years ago   262MBNote: on the question of '42 years ago' refer here https://buildpacks.io/docs/features/reproducibility/Run the app as a local docker containerRun the newly created docker image as follows.% docker run -p8090:8080 springboot_elementary:0.0.1-SNAPSHOTNote: use Ctrl-C to stop the process inside Terminal tab.Validate the app is up and running by navigating to localhost:8090 address in your browser.Deploy the app as a Multipass Docker containerReview the structure of a Multipass Docker deploymentCreate Multipass Docker instanceLaunch Multipass VM with a Docker instance using the following command inside the Terminal tab.% multipass launch dockerCheck the running docker instance with the following command. Note instance's IP address.% multipass info dockerName:           dockerState:          RunningIPv4:           192.168.64.3                172.17.0.1Release:        Ubuntu 21.10Image hash:     d5ebdea3522c (Ubuntu 21.10)Load:           0.26 0.62 0.33Disk usage:     2.4G out of 38.6GMemory usage:   210.7M out of 3.8GMounts:         --Copy docker image to Multipass Docker instanceCreate a tar archive of the docker image from local Docker Desktop instance by running the following command.% docker save -o springboot_elementary.tar springboot_elementaryCheck that the image archive has been created.% ls *.tarspringboot_elementary.tarTransfer the archive to Multipass Docker instance using the command below.% multipass transfer springboot_elementary.tar docker:/home/ubuntu/springboot_elementary.tarCheck if the file has been trasferred to a home directory of the multipass docker instance.% multipass exec docker lsspringboot_elementary.tarRun the app as a Multipass Docker containerOpen command line inside Multipass Docker image with the following command.% multipass shell dockerubuntu@docker:~$Note: to exit from the multipass instance shell and return back to IntelliJ Terminal use exit command.Create a docker image from the archive as follows.ubuntu@docker:~$ docker load -i springboot_elementary.tarCheck that the image has been created.ubuntu@docker:~$ docker image listREPOSITORY               TAG              IMAGE ID       CREATED        SIZEportainer/portainer-ce   latest           7b6e59279c38   6 weeks ago    275MBspringboot_elementary    0.0.1-SNAPSHOT   d24fd8f3e812   42 years ago   262MBNow you can run the spring web app as a container inside Multipass VM.ubuntu@docker:~$ docker run -p8085:8080 springboot_elementary:0.0.1-SNAPSHOTNote: use Ctrl-C to stop the process inside the terminal.Navigate browser to the 192.168.64.3:8085 address to validate that the web app is up and running.",
            "content_html": "<div><p>Toolkit: macOS | <a href=\"https://www.jetbrains.com/idea/\">InelliJ IDEA</a> | <a href=\"https://www.docker.com/products/docker-desktop/\">Docker Desktop</a> | <a href=\"https://multipass.run\">Multipass</a></p><p>Sources: <a href=\"https://github.com/rustam-isangulov/spring.io/tree/main/springboot_elementary\">GitHub</a></p></div><div id=\"outline-container-org3319e7d\" class=\"outline-2\"><h2 id=\"org3319e7d\">Review the structure of a static spring web app</h2><div class=\"outline-text-2\" id=\"text-org3319e7d\"><div id=\"org3643a31\" class=\"figure\"><p><img src=\"/images/MVCElementary.png\" alt=\"MVCElementary.png\" /></p></div><div id=\"orgabea983\" class=\"figure\"><p><img src=\"/images/MVCElementarySeq.png\" alt=\"MVCElementarySeq.png\" /></p></div><hr /></div></div><div id=\"outline-container-org7b5e7e3\" class=\"outline-2\"><h2 id=\"org7b5e7e3\">Create a basic spring web app</h2><div class=\"outline-text-2\" id=\"text-org7b5e7e3\"></div><div id=\"outline-container-org7bb6064\" class=\"outline-3\"><h3 id=\"org7bb6064\">Create spring project with <i>spring initializr</i></h3><div class=\"outline-text-3\" id=\"text-org7bb6064\"><p>Navigate to <a href=\"https:start.spring.io\">https:start.spring.io</a> and select following options:</p><ul class=\"org-ul\"><li><b>Project</b>: Maven Project</li><li><b>Language</b>: Java</li><li><b>Spring Boot</b>: 2.7.1</li><li>Project Metadata:<ul class=\"org-ul\"><li><b>Artifact</b>: \"springboot_ elementary\"</li><li><b>Descripton</b>: \"Elementary project for Spring Boot\"</li><li><b>Packaging</b>: Jar</li><li><b>Java</b>: 11</li></ul></li><li><b>Dependencies</b>: Spring Web</li></ul><div id=\"org4a3bb5d\" class=\"figure\"><p><img src=\"/images/SpringBootElem-Initializr.jpg\" alt=\"SpringBootElem-Initializr.jpg\" /></p></div><p>Use <b>\"GENERATE\"</b> button to download an archive with the new project. Unzip the archive and move <code>springboot_ elementary</code> folder to a development area.</p><p>Open the new project with <b><i>IntelliJ</i></b> and let dependencies to be downloaded. Specify run configuration with application name and main class through <code>Run -&gt; Run...</code> menu as follows.</p><div id=\"org7f41494\" class=\"figure\"><p><img src=\"/images/SpringBootElem-Project.jpg\" alt=\"SpringBootElem-Project.jpg\" /></p></div><p>Now you can build and run the app using <b><i>IntelliJ</i></b>, for example using <code>Run -&gt; Run</code> or <code>Build -&gt; Build Project</code> menus.</p></div></div><div id=\"outline-container-orgdf1c2c6\" class=\"outline-3\"><h3 id=\"orgdf1c2c6\">Add controller class</h3><div class=\"outline-text-3\" id=\"text-orgdf1c2c6\"><p>Create a new package <code>controllers</code> under <code>com.example.springboot_elementary</code> folder. Add <code>HomeController</code> class in this package as follows.</p><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Controller</span><span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">HomeController</span> {    <span style=\"color: #56B6C2;\">@GetMapping</span>(<span style=\"color: #98C379;\">\"/\"</span>)    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #61AFEF;\">home</span>() {        <span style=\"color: #C678DD;\">return</span> <span style=\"color: #98C379;\">\"home.html\"</span>;    }}</pre></div></div></div><div id=\"outline-container-orgc969dfc\" class=\"outline-3\"><h3 id=\"orgc969dfc\">Add static html source</h3><div class=\"outline-text-3\" id=\"text-orgc969dfc\"><p>Create a new <code>home.html</code> file under <code>src/main/resources/static</code> folder with the following content.</p><div class=\"org-src-container\"><pre class=\"src src-html\">&lt;<span style=\"color: #C678DD;\">!DOCTYPE</span> html&gt;&lt;<span style=\"color: #E06C75;\">html</span> <span style=\"color: #D19A66;\">lang</span>=<span style=\"color: #98C379;\">\"en\"</span>  <span style=\"color: #D19A66;\">xmlns</span>=<span style=\"color: #98C379;\">\"http://www.w3.org/1999/xhtml\"</span>&gt;&lt;<span style=\"color: #E06C75;\">head</span>&gt;    &lt;<span style=\"color: #E06C75;\">meta</span> <span style=\"color: #D19A66;\">charset</span>=<span style=\"color: #98C379;\">\"UTF-8\"</span>&gt;    &lt;<span style=\"color: #E06C75;\">title</span>&gt;<span style=\"font-weight: bold; text-decoration: underline;\">Spring web app</span>&lt;/<span style=\"color: #E06C75;\">title</span>&gt;&lt;/<span style=\"color: #E06C75;\">head</span>&gt;&lt;<span style=\"color: #E06C75;\">body</span>&gt;  &lt;<span style=\"color: #E06C75;\">h2</span>&gt;<span style=\"font-weight: bold; font-style: italic; text-decoration: underline;\">Home page for the Spring web app...</span>&lt;/<span style=\"color: #E06C75;\">h2</span>&gt;&lt;/<span style=\"color: #E06C75;\">body</span>&gt;&lt;/<span style=\"color: #E06C75;\">html</span>&gt;</pre></div></div></div><div id=\"outline-container-org35c515b\" class=\"outline-3\"><h3 id=\"org35c515b\">Add controller test class</h3><div class=\"outline-text-3\" id=\"text-org35c515b\"><p>Create a new package <code>controllers</code> in <code>src/test/java/com.example.springboot_elementary</code>. Add <code>HomeControllerTest</code> class with content as below.</p><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">additional static imports for MockMvc methods</span><span style=\"color: #C678DD;\">import</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #56B6C2;\">org</span>.<span style=\"color: #56B6C2;\">springframework</span>.<span style=\"color: #56B6C2;\">test</span>.<span style=\"color: #56B6C2;\">web</span>.<span style=\"color: #56B6C2;\">servlet</span>.<span style=\"color: #56B6C2;\">request</span>.MockMvcRequestBuilders.<span style=\"color: #E5C07B;\">get</span>;<span style=\"color: #C678DD;\">import</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #56B6C2;\">org</span>.<span style=\"color: #56B6C2;\">springframework</span>.<span style=\"color: #56B6C2;\">test</span>.<span style=\"color: #56B6C2;\">web</span>.<span style=\"color: #56B6C2;\">servlet</span>.<span style=\"color: #56B6C2;\">result</span>.<span style=\"color: #56B6C2;\">MockMvcResultMatchers</span>.*;<span style=\"color: #56B6C2;\">@WebMvcTest</span>(HomeController.<span style=\"color: #C678DD;\">class</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">HomeControllerTest</span> {    <span style=\"color: #56B6C2;\">@Autowired</span>    <span style=\"color: #C678DD;\">private</span> <span style=\"color: #E5C07B;\">MockMvc</span> <span style=\"color: #E06C75;\">mockMvc</span>;    <span style=\"color: #56B6C2;\">@Test</span>    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testHomePage</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">Exception</span> {        mockMvc.perform(get(<span style=\"color: #98C379;\">\"/\"</span>))                .andExpect(status().isOk())                .andExpect(view().name(<span style=\"color: #98C379;\">\"home.html\"</span>));    }}</pre></div></div></div><div id=\"outline-container-org42880a5\" class=\"outline-3\"><h3 id=\"org42880a5\">Run the app locally</h3><div class=\"outline-text-3\" id=\"text-org42880a5\"><p>Now you can build and run the app with the final project structure as follows.</p><div id=\"orga404e63\" class=\"figure\"><p><img src=\"/images/SpringBootElem-Structure.jpg\" alt=\"SpringBootElem-Structure.jpg\" width=\"300\" /></p></div><p>Run the app with <b><i>IntelliJ</i></b> using <code>Run -&gt; Run 'springboot_ elementary'</code> menu. Open a browser and navigate to <code>localhost:8080</code> to validate that the app is up and running as in the example below.</p><div id=\"org806250b\" class=\"figure\"><p><img src=\"/images/SpringBootElem-Safari.jpg\" alt=\"SpringBootElem-Safari.jpg\" /></p></div><hr /></div></div></div><div id=\"outline-container-org2ebd1c6\" class=\"outline-2\"><h2 id=\"org2ebd1c6\">Deploy the app as a Docker container locally</h2><div class=\"outline-text-2\" id=\"text-org2ebd1c6\"></div><div id=\"outline-container-orgefd0609\" class=\"outline-3\"><h3 id=\"orgefd0609\">Review the structure of a local Docker deployment</h3><div class=\"outline-text-3\" id=\"text-orgefd0609\"><div id=\"org2d59c32\" class=\"figure\"><p><img src=\"/images/MVCElementaryDockerLocal.png\" alt=\"MVCElementaryDockerLocal.png\" /></p></div></div></div><div id=\"outline-container-org198aef6\" class=\"outline-3\"><h3 id=\"org198aef6\">Add image name pattern to maven project configuration</h3><div class=\"outline-text-3\" id=\"text-org198aef6\"><p>Add image configuration to <code>spring-boot-maven-plugin</code> in <code>pom.xml</code>, and <b>re-Load Maven Changes</b> as follows.This is to set the name template for docker images.</p><div class=\"org-src-container\"><pre class=\"src src-html\">&lt;<span style=\"color: #E06C75;\">build</span>&gt;  &lt;<span style=\"color: #E06C75;\">plugins</span>&gt;    &lt;<span style=\"color: #E06C75;\">plugin</span>&gt;      &lt;<span style=\"color: #E06C75;\">groupId</span>&gt;org.springframework.boot&lt;/<span style=\"color: #E06C75;\">groupId</span>&gt;      &lt;<span style=\"color: #E06C75;\">artifactId</span>&gt;spring-boot-maven-plugin&lt;/<span style=\"color: #E06C75;\">artifactId</span>&gt;      &lt;<span style=\"color: #E06C75;\">configuration</span>&gt;        &lt;<span style=\"color: #E06C75;\">image</span>&gt; &lt;<span style=\"color: #E06C75;\">name</span>&gt;${project.artifactId}:${project.version}&lt;/<span style=\"color: #E06C75;\">name</span>&gt;        &lt;/<span style=\"color: #E06C75;\">image</span>&gt;      &lt;/<span style=\"color: #E06C75;\">configuration</span>&gt;    &lt;/<span style=\"color: #E06C75;\">plugin</span>&gt;  &lt;/<span style=\"color: #E06C75;\">plugins</span>&gt;&lt;/<span style=\"color: #E06C75;\">build</span>&gt;</pre></div></div></div><div id=\"outline-container-org8c1fd5e\" class=\"outline-3\"><h3 id=\"org8c1fd5e\">Create a Docker image</h3><div class=\"outline-text-3\" id=\"text-org8c1fd5e\"><p>Launch Docker Desktop app.</p><div id=\"org8733b93\" class=\"figure\"><p><img src=\"/images/SpringBootElem-DockerDesktop.jpg\" alt=\"SpringBootElem-DockerDesktop.jpg\" /></p></div><p>Switch to <code>Terminal</code> panel in <b><i>IntelliJ</i></b> through <code>View -&gt; Tool Windows -&gt; Terminal</code>. Run image building script as follows.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% ./mvnw spring-boot:build-image</pre></div><p>Check that the docker image has been created.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% docker image list springboot_elementaryREPOSITORY              TAG              IMAGE ID       CREATED        SIZEspringboot_elementary   0.0.1-SNAPSHOT   d24fd8f3e812   42 years ago   262MB</pre></div><p><i>Note: on the question of '42 years ago' refer here <a href=\"https://buildpacks.io/docs/features/reproducibility/\">https://buildpacks.io/docs/features/reproducibility/</a></i></p></div></div><div id=\"outline-container-org89d049f\" class=\"outline-3\"><h3 id=\"org89d049f\">Run the app as a local docker container</h3><div class=\"outline-text-3\" id=\"text-org89d049f\"><p>Run the newly created docker image as follows.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% docker run -p8090:8080 springboot_elementary:0.0.1-SNAPSHOT</pre></div><p><i>Note: use <code>Ctrl-C</code> to stop the process inside <code>Terminal</code> tab.</i></p><p>Validate the app is up and running by navigating to <code>localhost:8090</code> address in your browser.</p><hr /></div></div></div><div id=\"outline-container-org59ef0e5\" class=\"outline-2\"><h2 id=\"org59ef0e5\">Deploy the app as a Multipass Docker container</h2><div class=\"outline-text-2\" id=\"text-org59ef0e5\"></div><div id=\"outline-container-org598f4c0\" class=\"outline-3\"><h3 id=\"org598f4c0\">Review the structure of a Multipass Docker deployment</h3><div class=\"outline-text-3\" id=\"text-org598f4c0\"><div id=\"org1f6fe86\" class=\"figure\"><p><img src=\"/images/MVCElementaryDockerMultipass.png\" alt=\"MVCElementaryDockerMultipass.png\" /></p></div></div></div><div id=\"outline-container-orgd69aa63\" class=\"outline-3\"><h3 id=\"orgd69aa63\">Create Multipass Docker instance</h3><div class=\"outline-text-3\" id=\"text-orgd69aa63\"><p>Launch Multipass VM with a Docker instance using the following command inside the <code>Terminal</code> tab.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass launch docker</pre></div><p>Check the running docker instance with the following command. Note instance's IP address.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass info dockerName:           dockerState:          RunningIPv4:           192.168.64.3                172.17.0.1Release:        Ubuntu 21.10Image hash:     d5ebdea3522c (Ubuntu 21.10)Load:           0.26 0.62 0.33Disk usage:     2.4G out of 38.6GMemory usage:   210.7M out of 3.8GMounts:         --</pre></div></div></div><div id=\"outline-container-orgec47650\" class=\"outline-3\"><h3 id=\"orgec47650\">Copy docker image to Multipass Docker instance</h3><div class=\"outline-text-3\" id=\"text-orgec47650\"><p>Create a <code>tar</code> archive of the docker image from local Docker Desktop instance by running the following command.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% docker save -o springboot_elementary.tar springboot_elementary</pre></div><p>Check that the image archive has been created.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% ls *.tarspringboot_elementary.tar</pre></div><p>Transfer the archive to Multipass Docker instance using the command below.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass transfer springboot_elementary.tar docker:/home/ubuntu/springboot_elementary.tar</pre></div><p>Check if the file has been trasferred to a home directory of the multipass docker instance.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass exec docker lsspringboot_elementary.tar</pre></div></div></div><div id=\"outline-container-org58b108a\" class=\"outline-3\"><h3 id=\"org58b108a\">Run the app as a Multipass Docker container</h3><div class=\"outline-text-3\" id=\"text-org58b108a\"><p>Open command line inside Multipass Docker image with the following command.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass shell dockerubuntu@docker:~$</pre></div><p><i>Note: to exit from the multipass instance shell and return back to <b><i>IntelliJ</i></b> <code>Terminal</code> use <code>exit</code> command.</i></p><p>Create a docker image from the archive as follows.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">ubuntu@docker:~$ docker load -i springboot_elementary.tar</pre></div><p>Check that the image has been created.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">ubuntu@docker:~$ docker image listREPOSITORY               TAG              IMAGE ID       CREATED        SIZEportainer/portainer-ce   latest           7b6e59279c38   6 weeks ago    275MBspringboot_elementary    0.0.1-SNAPSHOT   d24fd8f3e812   42 years ago   262MB</pre></div><p>Now you can run the spring web app as a container inside Multipass VM.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">ubuntu@docker:~$ docker run -p8085:8080 springboot_elementary:0.0.1-SNAPSHOT</pre></div><p><i>Note: use <code>Ctrl-C</code> to stop the process inside the terminal.</i></p><p>Navigate browser to the <code>192.168.64.3:8085</code> address to validate that the web app is up and running.</p><div id=\"org478b6f3\" class=\"figure\"><p><img src=\"/images/SpringBootElem-SafariUbuntu.jpg\" alt=\"SpringBootElem-SafariUbuntu.jpg\" /></p></div><hr /></div></div></div>",
            "url": "http://localhost:4000/2022/06/27/html-is-possible",
            
            
            
            
            
            "date_published": "2022-06-27T12:11:27+01:00",
            "date_modified": "2022-06-27T12:11:27+01:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}