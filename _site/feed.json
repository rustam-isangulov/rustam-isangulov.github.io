{
    "version": "https://jsonfeed.org/version/1",
    "title": "blog",
    "home_page_url": "rustam-isangulov.github.io/",
    "feed_url": "rustam-isangulov.github.io/feed.json",
    "description": "A collection of articles on matters of software engineering.",
    "icon": "rustam-isangulov.github.io/apple-touch-icon.png",
    "favicon": "rustam-isangulov.github.io/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "rustam-isangulov.github.io/2022/06/27/html-is-possible",
            "title": "Creating an elementary spring web app and deplying it in a Multipass Docker environment",
            "summary": null,
            "content_text": "Creating an elementary spring web app and deploying it in a Multipass Docker enviroment.Toolkit: macOS | InelliJ IDEA | Docker Desktop | MultipassSources: GitHubReview the structure of a static spring web appCreate a basic spring web appCreate spring project with spring initializrNavigate to https:start.spring.io and select fowllowing options:Project: Maven ProjectLanguage: JavaSpring Boot: 2.7.1Project Metadata:Artifact: \"springboot_ elementary\"Descripton: \"Elementary project for Spring Boot\"Packaging: JarJava: 11Dependencies: Spring WebUse \"GENERATE\" button to download an archive with the new project. Unzip the archive and move springboot_ elementary folder to a development area.Open the new project with IntelliJ and let dependencies to be downloaded. Specify run configuration with application name and main class through Run -&gt; Run... menu as follows.Now you can build and run the app using IntelliJ, for example using Run -&gt; Run or Build -&gt; Build Project menus.Add controller classCreate a new package controllers under com.example.springboot_elementary folder. Add HomeController class in this package as follows.@Controllerpublic class HomeController {    @GetMapping(\"/\")    public String home() {        return \"home.html\";    }}Add static html sourceCreate a new home.html file under src/main/resources/static folder with the following content.&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"  xmlns=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt;    &lt;meta charset=\"UTF-8\"&gt;    &lt;title&gt;Spring web app&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;h2&gt;Home page for the Spring web app...&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;Add controller test classCreate a new package controllers in src/test/java/com.example.springboot_elementary. Add HomeControllerTest class with content as below.// additional static imports for MockMvc methodsimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;@WebMvcTest(HomeController.class)public class HomeControllerTest {    @Autowired    private MockMvc mockMvc;    @Test    public void testHomePage() throws Exception {        mockMvc.perform(get(\"/\"))                .andExpect(status().isOk())                .andExpect(view().name(\"home.html\"));    }}Run the app locallyNow you can build and run the app with the final project structure as follows.Run the app with IntelliJ using Run -&gt; Run 'springboot_ elementary' menu. Open a browser and navigate to localhost:8080 to validate that the app is up and running as in the example below.Deploy the app as a Docker container locallyReview the structure of a local Docker deploymentAdd image name pattern to maven project configurationAdd image configuration to spring-boot-maven-plugin in pom.xml, and re-Load Maven Changes as follows.This is to set the name template for docker images.&lt;build&gt;  &lt;plugins&gt;    &lt;plugin&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;      &lt;configuration&gt;        &lt;image&gt; &lt;name&gt;${project.artifactId}:${project.version}&lt;/name&gt;        &lt;/image&gt;      &lt;/configuration&gt;    &lt;/plugin&gt;  &lt;/plugins&gt;&lt;/build&gt;Create a Docker imageLaunch Docker Desktop app.Switch to Terminal panel in IntelliJ through View -&gt; Tool Windows -&gt; Terminal. Run image building script as follows.% ./mvnw spring-boot:build-imageCheck that the docker image has been created.% docker image list springboot_elementaryREPOSITORY              TAG              IMAGE ID       CREATED        SIZEspringboot_elementary   0.0.1-SNAPSHOT   d24fd8f3e812   42 years ago   262MBNote: on the question of '42 years ago' refer here https://buildpacks.io/docs/features/reproducibility/Run the app as a local docker containerRun the newly created docker image as follows.% docker run -p8090:8080 springboot_elementary:0.0.1-SNAPSHOTNote: use Ctrl-C to stop the process inside Terminal tab.Validate the app is up and running by navigating to localhost:8090 address in your browser.Deploy the app as a Multipass Docker containerReview the structure of a Multipass Docker deploymentCreate Multipass Docker instanceLaunch Multipass VM with a Docker instance using the following command inside the Terminal tab.% multipass launch dockerCheck the running docker instance with the followoing command. Note instance's IP address.% multipass info dockerName:           dockerState:          RunningIPv4:           192.168.64.3                172.17.0.1Release:        Ubuntu 21.10Image hash:     d5ebdea3522c (Ubuntu 21.10)Load:           0.26 0.62 0.33Disk usage:     2.4G out of 38.6GMemory usage:   210.7M out of 3.8GMounts:         --Copy docker image to Multipass Docker instanceCreate a tar archive of the docker image from local Docker Desktop instance by running the following command.% docker save -o springboot_elementary.tar springboot_elementaryCheck that the image archive has been created.% ls *.tarspringboot_elementary.tarTransfer the archive to Multipass Docker instance using the command below.% multipass transfer springboot_elementary.tar docker:/home/ubuntu/springboot_elementary.tarCheck if the file has been trasferred to a home directory of the multipass docker instance.% multipass exec docker lsspringboot_elementary.tarRun the app as a Multipass Docker containerOpen command line inside Multupass Docker image with the following command.% multipass shell dockerubuntu@docker:~$Note: to exit from the multipass instance shell and return back to IntelliJ Terminal use exit command.Create a docker image from the archive as follows.ubuntu@docker:~$ docker load -i springboot_elementary.tarCheck that the image has been created.ubuntu@docker:~$ docker image listREPOSITORY               TAG              IMAGE ID       CREATED        SIZEportainer/portainer-ce   latest           7b6e59279c38   6 weeks ago    275MBspringboot_elementary    0.0.1-SNAPSHOT   d24fd8f3e812   42 years ago   262MBNow you can run the spring web app as a container inside Multipass VM.ubuntu@docker:~$ docker run -p8085:8080 springboot_elementary:0.0.1-SNAPSHOTNote: use Ctrl-C to stop the process inside the terminal.Navigate browser to the 192.168.64.3:8085 address to validate that the web app is up and running.",
            "content_html": "<?xml version=\"1.0\" encoding=\"utf-8\"?><!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"><html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"en\" xml:lang=\"en\"><head><meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\" /><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /><title>Creating an elementary spring web app and deploying it in a Multipass Docker enviroment.</title><meta name=\"generator\" content=\"Org mode\" /><meta name=\"author\" content=\"Rustam Isangulov\" /><style>pre.src{ background:#343131;color:lightgray;padding: 1rem; border: 1px solid #aeb0b5;border-radius: 0.1875em;margin-top:1rem;margin-bottom:1rem;} ul {padding-left: 2em;} h1, h2, h3, h4, h5 {padding-top: 1rem; padding-bottom:1rem;} hr {margin-top:2rem; margin-bottom:2rem; border-style:inset; border-width:1px;} img {padding-top:1rem; padding-bottom:1rem;}</style><script type=\"text/javascript\">// @license magnet:?xt=urn:btih:e95b018ef3580986a04669f1b5879592219e2a7a&dn=public-domain.txt Public Domain<!--/*--><![CDATA[/*><!--*/     function CodeHighlightOn(elem, id)     {       var target = document.getElementById(id);       if(null != target) {         elem.classList.add(\"code-highlighted\");         target.classList.add(\"code-highlighted\");       }     }     function CodeHighlightOff(elem, id)     {       var target = document.getElementById(id);       if(null != target) {         elem.classList.remove(\"code-highlighted\");         target.classList.remove(\"code-highlighted\");       }     }    /*]]>*///-->// @license-end</script></head><body><div id=\"content\"><p>Toolkit: macOS | <a href=\"https://www.jetbrains.com/idea/\">InelliJ IDEA</a> | <a href=\"https://www.docker.com/products/docker-desktop/\">Docker Desktop</a> | <a href=\"https://multipass.run\">Multipass</a></p><p>Sources: <a href=\"https://github.com/rustam-isangulov/spring.io/tree/main/springboot_elementary\">GitHub</a></p><div id=\"outline-container-org6cbec52\" class=\"outline-2\"><h2 id=\"org6cbec52\">Review the structure of a static spring web app</h2><div class=\"outline-text-2\" id=\"text-org6cbec52\"><div id=\"orgd810279\" class=\"figure\"><p><img src=\"/images/MVCElementary.png\" alt=\"MVCElementary.png\" /></p></div><div id=\"org83073a7\" class=\"figure\"><p><img src=\"/images/MVCElementarySeq.png\" alt=\"MVCElementarySeq.png\" /></p></div><hr /></div></div><div id=\"outline-container-orge410d48\" class=\"outline-2\"><h2 id=\"orge410d48\">Create a basic spring web app</h2><div class=\"outline-text-2\" id=\"text-orge410d48\"></div><div id=\"outline-container-org4b0c021\" class=\"outline-3\"><h3 id=\"org4b0c021\">Create spring project with <i>spring initializr</i></h3><div class=\"outline-text-3\" id=\"text-org4b0c021\"><p>Navigate to <a href=\"https:start.spring.io\">https:start.spring.io</a> and select fowllowing options:</p><ul class=\"org-ul\"><li><b>Project</b>: Maven Project</li><li><b>Language</b>: Java</li><li><b>Spring Boot</b>: 2.7.1</li><li>Project Metadata:<ul class=\"org-ul\"><li><b>Artifact</b>: \"springboot_ elementary\"</li><li><b>Descripton</b>: \"Elementary project for Spring Boot\"</li><li><b>Packaging</b>: Jar</li><li><b>Java</b>: 11</li></ul></li><li><b>Dependencies</b>: Spring Web</li></ul><div id=\"orgbe895c7\" class=\"figure\"><p><img src=\"/images/SpringBootElem-Initializr.jpg\" alt=\"SpringBootElem-Initializr.jpg\" /></p></div><p>Use <b>\"GENERATE\"</b> button to download an archive with the new project. Unzip the archive and move <code>springboot_ elementary</code> folder to a development area.</p><p>Open the new project with <b><i>IntelliJ</i></b> and let dependencies to be downloaded. Specify run configuration with application name and main class through <code>Run -&gt; Run...</code> menu as follows.</p><div id=\"org8d8751e\" class=\"figure\"><p><img src=\"/images/SpringBootElem-Project.jpg\" alt=\"SpringBootElem-Project.jpg\" /></p></div><p>Now you can build and run the app using <b><i>IntelliJ</i></b>, for example using <code>Run -&gt; Run</code> or <code>Build -&gt; Build Project</code> menus.</p></div></div><div id=\"outline-container-orgced37d5\" class=\"outline-3\"><h3 id=\"orgced37d5\">Add controller class</h3><div class=\"outline-text-3\" id=\"text-orgced37d5\"><p>Create a new package <code>controllers</code> under <code>com.example.springboot_elementary</code> folder. Add <code>HomeController</code> class in this package as follows.</p><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Controller</span><span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">HomeController</span> {    <span style=\"color: #56B6C2;\">@GetMapping</span>(<span style=\"color: #98C379;\">\"/\"</span>)    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #61AFEF;\">home</span>() {        <span style=\"color: #C678DD;\">return</span> <span style=\"color: #98C379;\">\"home.html\"</span>;    }}</pre></div></div></div><div id=\"outline-container-org2affc8c\" class=\"outline-3\"><h3 id=\"org2affc8c\">Add static html source</h3><div class=\"outline-text-3\" id=\"text-org2affc8c\"><p>Create a new <code>home.html</code> file under <code>src/main/resources/static</code> folder with the following content.</p><div class=\"org-src-container\"><pre class=\"src src-html\">&lt;<span style=\"color: #C678DD;\">!DOCTYPE</span> html&gt;&lt;<span style=\"color: #E06C75;\">html</span> <span style=\"color: #D19A66;\">lang</span>=<span style=\"color: #98C379;\">\"en\"</span>  <span style=\"color: #D19A66;\">xmlns</span>=<span style=\"color: #98C379;\">\"http://www.w3.org/1999/xhtml\"</span>&gt;&lt;<span style=\"color: #E06C75;\">head</span>&gt;    &lt;<span style=\"color: #E06C75;\">meta</span> <span style=\"color: #D19A66;\">charset</span>=<span style=\"color: #98C379;\">\"UTF-8\"</span>&gt;    &lt;<span style=\"color: #E06C75;\">title</span>&gt;<span style=\"font-weight: bold; text-decoration: underline;\">Spring web app</span>&lt;/<span style=\"color: #E06C75;\">title</span>&gt;&lt;/<span style=\"color: #E06C75;\">head</span>&gt;&lt;<span style=\"color: #E06C75;\">body</span>&gt;  &lt;<span style=\"color: #E06C75;\">h2</span>&gt;<span style=\"font-weight: bold; font-style: italic; text-decoration: underline;\">Home page for the Spring web app...</span>&lt;/<span style=\"color: #E06C75;\">h2</span>&gt;&lt;/<span style=\"color: #E06C75;\">body</span>&gt;&lt;/<span style=\"color: #E06C75;\">html</span>&gt;</pre></div></div></div><div id=\"outline-container-org468d9a9\" class=\"outline-3\"><h3 id=\"org468d9a9\">Add controller test class</h3><div class=\"outline-text-3\" id=\"text-org468d9a9\"><p>Create a new package <code>controllers</code> in <code>src/test/java/com.example.springboot_elementary</code>. Add <code>HomeControllerTest</code> class with content as below.</p><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">additional static imports for MockMvc methods</span><span style=\"color: #C678DD;\">import</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #56B6C2;\">org</span>.<span style=\"color: #56B6C2;\">springframework</span>.<span style=\"color: #56B6C2;\">test</span>.<span style=\"color: #56B6C2;\">web</span>.<span style=\"color: #56B6C2;\">servlet</span>.<span style=\"color: #56B6C2;\">request</span>.MockMvcRequestBuilders.<span style=\"color: #E5C07B;\">get</span>;<span style=\"color: #C678DD;\">import</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #56B6C2;\">org</span>.<span style=\"color: #56B6C2;\">springframework</span>.<span style=\"color: #56B6C2;\">test</span>.<span style=\"color: #56B6C2;\">web</span>.<span style=\"color: #56B6C2;\">servlet</span>.<span style=\"color: #56B6C2;\">result</span>.<span style=\"color: #56B6C2;\">MockMvcResultMatchers</span>.*;<span style=\"color: #56B6C2;\">@WebMvcTest</span>(HomeController.<span style=\"color: #C678DD;\">class</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">HomeControllerTest</span> {    <span style=\"color: #56B6C2;\">@Autowired</span>    <span style=\"color: #C678DD;\">private</span> <span style=\"color: #E5C07B;\">MockMvc</span> <span style=\"color: #E06C75;\">mockMvc</span>;    <span style=\"color: #56B6C2;\">@Test</span>    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testHomePage</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">Exception</span> {        mockMvc.perform(get(<span style=\"color: #98C379;\">\"/\"</span>))                .andExpect(status().isOk())                .andExpect(view().name(<span style=\"color: #98C379;\">\"home.html\"</span>));    }}</pre></div></div></div><div id=\"outline-container-org87e6542\" class=\"outline-3\"><h3 id=\"org87e6542\">Run the app locally</h3><div class=\"outline-text-3\" id=\"text-org87e6542\"><p>Now you can build and run the app with the final project structure as follows.</p><div id=\"org68d2e2b\" class=\"figure\"><p><img src=\"/images/SpringBootElem-Structure.jpg\" alt=\"SpringBootElem-Structure.jpg\" width=\"300\" /></p></div><p>Run the app with <b><i>IntelliJ</i></b> using <code>Run -&gt; Run 'springboot_ elementary'</code> menu. Open a browser and navigate to <code>localhost:8080</code> to validate that the app is up and running as in the example below.</p><div id=\"org613476e\" class=\"figure\"><p><img src=\"/images/SpringBootElem-Safari.jpg\" alt=\"SpringBootElem-Safari.jpg\" /></p></div><hr /></div></div></div><div id=\"outline-container-org8a44bc8\" class=\"outline-2\"><h2 id=\"org8a44bc8\">Deploy the app as a Docker container locally</h2><div class=\"outline-text-2\" id=\"text-org8a44bc8\"></div><div id=\"outline-container-org8af5018\" class=\"outline-3\"><h3 id=\"org8af5018\">Review the structure of a local Docker deployment</h3><div class=\"outline-text-3\" id=\"text-org8af5018\"><div id=\"org95ec2e9\" class=\"figure\"><p><img src=\"/images/MVCElementaryDockerLocal.png\" alt=\"MVCElementaryDockerLocal.png\" /></p></div></div></div><div id=\"outline-container-orgea1fcf2\" class=\"outline-3\"><h3 id=\"orgea1fcf2\">Add image name pattern to maven project configuration</h3><div class=\"outline-text-3\" id=\"text-orgea1fcf2\"><p>Add image configuration to <code>spring-boot-maven-plugin</code> in <code>pom.xml</code>, and <b>re-Load Maven Changes</b> as follows.This is to set the name template for docker images.</p><div class=\"org-src-container\"><pre class=\"src src-html\">&lt;<span style=\"color: #E06C75;\">build</span>&gt;  &lt;<span style=\"color: #E06C75;\">plugins</span>&gt;    &lt;<span style=\"color: #E06C75;\">plugin</span>&gt;      &lt;<span style=\"color: #E06C75;\">groupId</span>&gt;org.springframework.boot&lt;/<span style=\"color: #E06C75;\">groupId</span>&gt;      &lt;<span style=\"color: #E06C75;\">artifactId</span>&gt;spring-boot-maven-plugin&lt;/<span style=\"color: #E06C75;\">artifactId</span>&gt;      &lt;<span style=\"color: #E06C75;\">configuration</span>&gt;        &lt;<span style=\"color: #E06C75;\">image</span>&gt; &lt;<span style=\"color: #E06C75;\">name</span>&gt;${project.artifactId}:${project.version}&lt;/<span style=\"color: #E06C75;\">name</span>&gt;        &lt;/<span style=\"color: #E06C75;\">image</span>&gt;      &lt;/<span style=\"color: #E06C75;\">configuration</span>&gt;    &lt;/<span style=\"color: #E06C75;\">plugin</span>&gt;  &lt;/<span style=\"color: #E06C75;\">plugins</span>&gt;&lt;/<span style=\"color: #E06C75;\">build</span>&gt;</pre></div></div></div><div id=\"outline-container-org0570deb\" class=\"outline-3\"><h3 id=\"org0570deb\">Create a Docker image</h3><div class=\"outline-text-3\" id=\"text-org0570deb\"><p>Launch Docker Desktop app.</p><div id=\"org5660ed8\" class=\"figure\"><p><img src=\"/images/SpringBootElem-DockerDesktop.jpg\" alt=\"SpringBootElem-DockerDesktop.jpg\" /></p></div><p>Switch to <code>Terminal</code> panel in <b><i>IntelliJ</i></b> through <code>View -&gt; Tool Windows -&gt; Terminal</code>. Run image building script as follows.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% ./mvnw spring-boot:build-image</pre></div><p>Check that the docker image has been created.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% docker image list springboot_elementaryREPOSITORY              TAG              IMAGE ID       CREATED        SIZEspringboot_elementary   0.0.1-SNAPSHOT   d24fd8f3e812   42 years ago   262MB</pre></div><p><i>Note: on the question of '42 years ago' refer here <a href=\"https://buildpacks.io/docs/features/reproducibility/\">https://buildpacks.io/docs/features/reproducibility/</a></i></p></div></div><div id=\"outline-container-orga9b1991\" class=\"outline-3\"><h3 id=\"orga9b1991\">Run the app as a local docker container</h3><div class=\"outline-text-3\" id=\"text-orga9b1991\"><p>Run the newly created docker image as follows.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% docker run -p8090:8080 springboot_elementary:0.0.1-SNAPSHOT</pre></div><p><i>Note: use <code>Ctrl-C</code> to stop the process inside <code>Terminal</code> tab.</i></p><p>Validate the app is up and running by navigating to <code>localhost:8090</code> address in your browser.</p><hr /></div></div></div><div id=\"outline-container-org7e0c0b7\" class=\"outline-2\"><h2 id=\"org7e0c0b7\">Deploy the app as a Multipass Docker container</h2><div class=\"outline-text-2\" id=\"text-org7e0c0b7\"></div><div id=\"outline-container-org532befb\" class=\"outline-3\"><h3 id=\"org532befb\">Review the structure of a Multipass Docker deployment</h3><div class=\"outline-text-3\" id=\"text-org532befb\"><div id=\"org905e381\" class=\"figure\"><p><img src=\"/images/MVCElementaryDockerMultipass.png\" alt=\"MVCElementaryDockerMultipass.png\" /></p></div></div></div><div id=\"outline-container-org4ef0dfe\" class=\"outline-3\"><h3 id=\"org4ef0dfe\">Create Multipass Docker instance</h3><div class=\"outline-text-3\" id=\"text-org4ef0dfe\"><p>Launch Multipass VM with a Docker instance using the following command inside the <code>Terminal</code> tab.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass launch docker</pre></div><p>Check the running docker instance with the followoing command. Note instance's IP address.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass info dockerName:           dockerState:          RunningIPv4:           192.168.64.3                172.17.0.1Release:        Ubuntu 21.10Image hash:     d5ebdea3522c (Ubuntu 21.10)Load:           0.26 0.62 0.33Disk usage:     2.4G out of 38.6GMemory usage:   210.7M out of 3.8GMounts:         --</pre></div></div></div><div id=\"outline-container-orge61d7a8\" class=\"outline-3\"><h3 id=\"orge61d7a8\">Copy docker image to Multipass Docker instance</h3><div class=\"outline-text-3\" id=\"text-orge61d7a8\"><p>Create a <code>tar</code> archive of the docker image from local Docker Desktop instance by running the following command.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% docker save -o springboot_elementary.tar springboot_elementary</pre></div><p>Check that the image archive has been created.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% ls *.tarspringboot_elementary.tar</pre></div><p>Transfer the archive to Multipass Docker instance using the command below.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass transfer springboot_elementary.tar docker:/home/ubuntu/springboot_elementary.tar</pre></div><p>Check if the file has been trasferred to a home directory of the multipass docker instance.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass exec docker lsspringboot_elementary.tar</pre></div></div></div><div id=\"outline-container-orgcad936a\" class=\"outline-3\"><h3 id=\"orgcad936a\">Run the app as a Multipass Docker container</h3><div class=\"outline-text-3\" id=\"text-orgcad936a\"><p>Open command line inside Multupass Docker image with the following command.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass shell dockerubuntu@docker:~$</pre></div><p><i>Note: to exit from the multipass instance shell and return back to <b><i>IntelliJ</i></b> <code>Terminal</code> use <code>exit</code> command.</i></p><p>Create a docker image from the archive as follows.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">ubuntu@docker:~$ docker load -i springboot_elementary.tar</pre></div><p>Check that the image has been created.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">ubuntu@docker:~$ docker image listREPOSITORY               TAG              IMAGE ID       CREATED        SIZEportainer/portainer-ce   latest           7b6e59279c38   6 weeks ago    275MBspringboot_elementary    0.0.1-SNAPSHOT   d24fd8f3e812   42 years ago   262MB</pre></div><p>Now you can run the spring web app as a container inside Multipass VM.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">ubuntu@docker:~$ docker run -p8085:8080 springboot_elementary:0.0.1-SNAPSHOT</pre></div><p><i>Note: use <code>Ctrl-C</code> to stop the process inside the terminal.</i></p><p>Navigate browser to the <code>192.168.64.3:8085</code> address to validate that the web app is up and running.</p><div id=\"org414ed97\" class=\"figure\"><p><img src=\"/images/SpringBootElem-SafariUbuntu.jpg\" alt=\"SpringBootElem-SafariUbuntu.jpg\" /></p></div><hr /></div></div></div></div></body></html>",
            "url": "rustam-isangulov.github.io/2022/06/27/html-is-possible",
            
            
            
            
            
            "date_published": "2022-06-27T12:11:27+01:00",
            "date_modified": "2022-06-27T12:11:27+01:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}