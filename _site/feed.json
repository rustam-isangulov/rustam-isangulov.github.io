{
    "version": "https://jsonfeed.org/version/1",
    "title": "blog",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "A collection of articles on matters of software engineering.",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author": "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}",
    
"items": [
    
        {
            "id": "http://localhost:4000/2022/07/30/java-fundamentals-ftputil",
            "title": "Creating an ftp utility using Apache Commons <code>FTPClient</code>",
            "summary": null,
            "content_text": "Toolkit: macOS | InelliJ IDEA | Apache Commons NetSources: GitHubObjectivesCreate a utility to:download multiple(all) files from a directory on an ftp serverwork from inside container/VM environmentsNote: for the second objective FTPClient should be switched to local passive mode, see open(...) method for details.Review the structureAdd dependecies to Apache Commons in maven projectpom.xml&lt;dependencies&gt;  &lt;dependency&gt;    &lt;groupId&gt;commons-net&lt;/groupId&gt;    &lt;artifactId&gt;commons-net&lt;/artifactId&gt;    &lt;version&gt;3.8.0&lt;/version&gt;  &lt;/dependency&gt;&lt;/dependencies&gt;Add create instance and open connection logicIn this section we will add content for open/close connection method, constructor and instance factory methods.open(...)private void open(int port, String user, String password) throws IOException {    // connect    ftp.connect(server.toString(), port);    // check for connection failures    if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {        ftp.disconnect();        throw new IOException            (\"Unable to connect to FTP Server: \" + server             + \" port: \" + port);    }    // check for login failures    if (!ftp.login(user, password)) {        ftp.disconnect();        throw new IOException            (\"Unable to login to FTP Server: \" + server             + \" port: \" + port);    }    // passive mode to be able to work from inside VMs    ftp.enterLocalPassiveMode();    // now ready to access files and dirs}close()@Overridepublic void close() throws IOException {    ftp.logout();    ftp.disconnect();}FtpClient(...)private FtpClient(URI serverAddress, FTPClient ftp) {    this.server = serverAddress;    this.ftp = ftp;}getClient(...)public static FtpClient getClient    (URI serverAddress, FTPClient ftp) throws IOException {    // default port    int port = 21;    // username for public access data    String user = \"anonymous\";    // password for anonymous users    String password = \"\";    FtpClient client = new FtpClient(serverAddress, ftp);    client.open(port, user, password);    return client;}public static FtpClient getClient    (URI serverAddress, FTPClient ftp     , int port, String user, String password) throws IOException {    FtpClient client = new FtpClient(serverAddress, ftp);    client.open(port, user, password);    return client;}List files in a remote directoryIn this section we will add the logic to retrieve a list of files in a remote directory.listFiles(...)public List&lt;FTPFile&gt; listFiles(Path remoteDir) throws IOException {    FTPFile[] files = ftp.listFiles(remoteDir.toString());    return Arrays.stream(files)        .collect(Collectors.toList());}Download remote filesIn this section we will add content for remote files downloading methods, both single file and multple files versions.downloadFile(...)public void downloadFile    (Path remoteFile, OutputStream out) throws IOException {    ftp.retrieveFile(remoteFile.toString(), out);}downloadAllFiles(...)public void downloadAllFiles    (Path remoteDir     , Function&lt;Path, OutputStream&gt; outputProvider     , Consumer&lt;String&gt; progressReporter) throws IOException {    var files = ftp.listFiles(remoteDir.toString());    var filesList = Arrays.stream(files)        .filter(FTPFile::isFile)        .map(FTPFile::getName)        .collect(Collectors.toList());    for(int i = 0; i &lt; filesList.size(); i++) {        progressReporter.accept            (String.format(\"Downloading (%d of %d):[%s]\"                           , i+1, filesList.size(), filesList.get(i)));        try (var out = outputProvider.apply(Path.of(filesList.get(i)))) {            ftp.retrieveFile(remoteDir.resolve(filesList.get(i)).toString(), out);        }    }}ExampleHere is an example of using the FtpClient to list and download multiple files form an FTP server.public class FtiUtilRun {    public static void main(String... args) throws IOException {        // create and open connection        try (var ftpClient = FtpClient.getClient             (URI.create(\"ftp.ebi.ac.uk\"), new FTPClient())){            // remote directory            var remoteDir = Path.of                (\"/pub/databases/opentargets/\" +                 \"platform/latest/output/etl/json/diseases/\");            // print a list of files in a remote directory            ftpClient.listFiles(remoteDir)                .forEach(System.out::println);            // provide output stream to copy a remote file content into            Function&lt;Path, OutputStream&gt; outputProvider = file -&gt; {                try {                    return new BufferedOutputStream                       (new FileOutputStream(file.toFile()));                } catch (FileNotFoundException e) {                    throw new RuntimeException                        (\"Cannot create files in the local directory...\",e);                }            };            // progress reporter            Consumer&lt;String&gt; progressReporter = System.out::println;            // download all files in the directory            ftpClient.downloadAllFiles                (remoteDir, outputProvider, progressReporter);        }    }}Output:-rw-r--r--    1 ftp      ftp             0 Jun 20 12:03 _SUCCESS-rw-r--r--    1 ftp      ftp       1760417 Jun 20 12:03 part-00000-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1699456 Jun 20 12:03 part-00001-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1745262 Jun 20 12:03 part-00002-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1664693 Jun 20 12:03 part-00003-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2135641 Jun 20 12:03 part-00004-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2115169 Jun 20 12:03 part-00005-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2322320 Jun 20 12:03 part-00006-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2165083 Jun 20 12:03 part-00007-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1818603 Jun 20 12:03 part-00008-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1890536 Jun 20 12:03 part-00009-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1806820 Jun 20 12:03 part-00010-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2078683 Jun 20 12:03 part-00011-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        644630 Jun 20 12:03 part-00012-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        697469 Jun 20 12:03 part-00013-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        684315 Jun 20 12:03 part-00014-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        676954 Jun 20 12:03 part-00015-083c466a-3036-42e0-97ab-87035b32cc9b-c000.jsonDownloading (1 of 17):[_SUCCESS]Downloading (2 of 17):[part-00000-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (3 of 17):[part-00001-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (4 of 17):[part-00002-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (5 of 17):[part-00003-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (6 of 17):[part-00004-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (7 of 17):[part-00005-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (8 of 17):[part-00006-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (9 of 17):[part-00007-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (10 of 17):[part-00008-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (11 of 17):[part-00009-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (12 of 17):[part-00010-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (13 of 17):[part-00011-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (14 of 17):[part-00012-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (15 of 17):[part-00013-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (16 of 17):[part-00014-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Downloading (17 of 17):[part-00015-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Process finished with exit code 0Thank you.",
            "content_html": "<div class=\"post\"><p>Toolkit: macOS | <a href=\"https://www.jetbrains.com/idea/\">InelliJ IDEA</a> | <a href=\"https://commons.apache.org/proper/commons-net/\">Apache Commons Net</a></p><p>Sources: <a href=\"https://github.com/rustam-isangulov/java.fundamentals\">GitHub</a></p></div><div id=\"outline-container-org37d94e0\" class=\"outline-2\"><h2 id=\"org37d94e0\">Objectives</h2><div class=\"outline-text-2\" id=\"text-org37d94e0\"><p>Create a utility to:</p><ul class=\"org-ul\"><li>download multiple(all) files from a directory on an ftp server</li><li>work from inside container/VM environments</li></ul><p><i>Note: for the second objective <code>FTPClient</code> should be switched to <b>local passive mode</b>, see <code>open(...)</code> method for details.</i></p></div></div><div id=\"outline-container-orgde3cbdc\" class=\"outline-2\"><h2 id=\"orgde3cbdc\">Review the structure</h2><div class=\"outline-text-2\" id=\"text-orgde3cbdc\"><div id=\"org1f0106b\" class=\"figure\"><p><img src=\"/images/ftputil-structure.png\" alt=\"ftputil-structure.png\" /></p></div><hr /></div></div><div id=\"outline-container-org644ba1d\" class=\"outline-2\"><h2 id=\"org644ba1d\">Add dependecies to Apache Commons in <code>maven</code> project</h2><div class=\"outline-text-2\" id=\"text-org644ba1d\"></div><div id=\"outline-container-org6277511\" class=\"outline-3\"><h3 id=\"org6277511\"><code>pom.xml</code></h3><div class=\"outline-text-3\" id=\"text-org6277511\"><div class=\"org-src-container\"><pre class=\"src src-xml\">&lt;<span style=\"color: #E06C75;\">dependencies</span>&gt;  &lt;<span style=\"color: #E06C75;\">dependency</span>&gt;    &lt;<span style=\"color: #E06C75;\">groupId</span>&gt;commons-net&lt;/<span style=\"color: #E06C75;\">groupId</span>&gt;    &lt;<span style=\"color: #E06C75;\">artifactId</span>&gt;commons-net&lt;/<span style=\"color: #E06C75;\">artifactId</span>&gt;    &lt;<span style=\"color: #E06C75;\">version</span>&gt;3.8.0&lt;/<span style=\"color: #E06C75;\">version</span>&gt;  &lt;/<span style=\"color: #E06C75;\">dependency</span>&gt;&lt;/<span style=\"color: #E06C75;\">dependencies</span>&gt;</pre></div></div></div></div><div id=\"outline-container-org88760b3\" class=\"outline-2\"><h2 id=\"org88760b3\">Add create instance and open connection logic</h2><div class=\"outline-text-2\" id=\"text-org88760b3\"><p>In this section we will add content for open/close connection method, constructor and instance factory methods.</p></div><div id=\"outline-container-org401515b\" class=\"outline-3\"><h3 id=\"org401515b\"><code>open(...)</code></h3><div class=\"outline-text-3\" id=\"text-org401515b\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">private</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">open</span>(<span style=\"color: #E5C07B;\">int</span> <span style=\"color: #E06C75;\">port</span>, <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">user</span>, <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">password</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">connect</span>    ftp.connect(server.toString(), port);    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">check for connection failures</span>    <span style=\"color: #C678DD;\">if</span> (<span style=\"color: #56B6C2; font-weight: bold;\">!</span>FTPReply.isPositiveCompletion(ftp.getReplyCode())) {        ftp.disconnect();        <span style=\"color: #C678DD;\">throw</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">IOException</span>            (<span style=\"color: #98C379;\">\"Unable to connect to FTP Server: \"</span> + server             + <span style=\"color: #98C379;\">\" port: \"</span> + port);    }    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">check for login failures</span>    <span style=\"color: #C678DD;\">if</span> (<span style=\"color: #56B6C2; font-weight: bold;\">!</span>ftp.login(user, password)) {        ftp.disconnect();        <span style=\"color: #C678DD;\">throw</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">IOException</span>            (<span style=\"color: #98C379;\">\"Unable to login to FTP Server: \"</span> + server             + <span style=\"color: #98C379;\">\" port: \"</span> + port);    }    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">passive mode to be able to work from inside VMs</span>    ftp.enterLocalPassiveMode();    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">now ready to access files and dirs</span>}</pre></div></div></div><div id=\"outline-container-org7ce3ae7\" class=\"outline-3\"><h3 id=\"org7ce3ae7\"><code>close()</code></h3><div class=\"outline-text-3\" id=\"text-org7ce3ae7\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Override</span><span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">close</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    ftp.logout();    ftp.disconnect();}</pre></div></div></div><div id=\"outline-container-org85215df\" class=\"outline-3\"><h3 id=\"org85215df\"><code>FtpClient(...)</code></h3><div class=\"outline-text-3\" id=\"text-org85215df\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">private</span> <span style=\"color: #61AFEF;\">FtpClient</span>(<span style=\"color: #E5C07B;\">URI</span> <span style=\"color: #E06C75;\">serverAddress</span>, <span style=\"color: #E5C07B;\">FTPClient</span> <span style=\"color: #E06C75;\">ftp</span>) {    <span style=\"color: #C678DD;\">this</span>.server = serverAddress;    <span style=\"color: #C678DD;\">this</span>.ftp = ftp;}</pre></div></div></div><div id=\"outline-container-orgea1c41b\" class=\"outline-3\"><h3 id=\"orgea1c41b\"><code>getClient(...)</code></h3><div class=\"outline-text-3\" id=\"text-orgea1c41b\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #61AFEF;\">getClient</span>    (<span style=\"color: #E5C07B;\">URI</span> <span style=\"color: #E06C75;\">serverAddress</span>, <span style=\"color: #E5C07B;\">FTPClient</span> <span style=\"color: #E06C75;\">ftp</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">default port</span>    <span style=\"color: #E5C07B;\">int</span> <span style=\"color: #E06C75;\">port</span> = 21;    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">username for public access data</span>    <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">user</span> = <span style=\"color: #98C379;\">\"anonymous\"</span>;    <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">password for anonymous users</span>    <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">password</span> = <span style=\"color: #98C379;\">\"\"</span>;    <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #E06C75;\">client</span> = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FtpClient</span>(serverAddress, ftp);    client.open(port, user, password);    <span style=\"color: #C678DD;\">return</span> client;}<span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #61AFEF;\">getClient</span>    (<span style=\"color: #E5C07B;\">URI</span> <span style=\"color: #E06C75;\">serverAddress</span>, <span style=\"color: #E5C07B;\">FTPClient</span> <span style=\"color: #E06C75;\">ftp</span>     , <span style=\"color: #E5C07B;\">int</span> <span style=\"color: #E06C75;\">port</span>, <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">user</span>, <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #E06C75;\">password</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #E5C07B;\">FtpClient</span> <span style=\"color: #E06C75;\">client</span> = <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FtpClient</span>(serverAddress, ftp);    client.open(port, user, password);    <span style=\"color: #C678DD;\">return</span> client;}</pre></div></div></div></div><div id=\"outline-container-org3d9420e\" class=\"outline-2\"><h2 id=\"org3d9420e\">List files in a remote directory</h2><div class=\"outline-text-2\" id=\"text-org3d9420e\"><p>In this section we will add the logic to retrieve a list of files in a remote directory.</p></div><div id=\"outline-container-orga027393\" class=\"outline-3\"><h3 id=\"orga027393\"><code>listFiles(...)</code></h3><div class=\"outline-text-3\" id=\"text-orga027393\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">List</span>&lt;<span style=\"color: #E5C07B;\">FTPFile</span>&gt; <span style=\"color: #61AFEF;\">listFiles</span>(<span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">remoteDir</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #E5C07B;\">FTPFile</span>[] <span style=\"color: #E06C75;\">files</span> = ftp.listFiles(remoteDir.toString());    <span style=\"color: #C678DD;\">return</span> Arrays.stream(files)        .collect(Collectors.toList());}</pre></div></div></div></div><div id=\"outline-container-orga6f6f3f\" class=\"outline-2\"><h2 id=\"orga6f6f3f\">Download remote files</h2><div class=\"outline-text-2\" id=\"text-orga6f6f3f\"><p>In this section we will add content for remote files downloading methods, both single file and multple files versions.</p></div><div id=\"outline-container-org149a8f9\" class=\"outline-3\"><h3 id=\"org149a8f9\"><code>downloadFile(...)</code></h3><div class=\"outline-text-3\" id=\"text-org149a8f9\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">downloadFile</span>    (<span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">remoteFile</span>, <span style=\"color: #E5C07B;\">OutputStream</span> <span style=\"color: #E06C75;\">out</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    ftp.retrieveFile(remoteFile.toString(), out);}</pre></div></div></div><div id=\"outline-container-org84ef305\" class=\"outline-3\"><h3 id=\"org84ef305\"><code>downloadAllFiles(...)</code></h3><div class=\"outline-text-3\" id=\"text-org84ef305\"><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">downloadAllFiles</span>    (<span style=\"color: #E5C07B;\">Path</span> <span style=\"color: #E06C75;\">remoteDir</span>     , <span style=\"color: #E5C07B;\">Function</span>&lt;<span style=\"color: #E5C07B;\">Path</span>, <span style=\"color: #E5C07B;\">OutputStream</span>&gt; <span style=\"color: #E06C75;\">outputProvider</span>     , <span style=\"color: #E5C07B;\">Consumer</span>&lt;<span style=\"color: #E5C07B;\">String</span>&gt; <span style=\"color: #E06C75;\">progressReporter</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {    <span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">files</span> = ftp.listFiles(remoteDir.toString());    <span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">filesList</span> = Arrays.stream(files)        .filter(FTPFile::isFile)        .map(FTPFile::getName)        .collect(Collectors.toList());    <span style=\"color: #C678DD;\">for</span>(<span style=\"color: #E5C07B;\">int</span> <span style=\"color: #E06C75;\">i</span> = 0; i &lt; filesList.<span style=\"color: #E5C07B;\">size</span>(); i++) {        progressReporter.accept            (String.format(<span style=\"color: #98C379;\">\"Downloading (%d of %d):[%s]\"</span>                           , i+1, filesList.size(), filesList.get(i)));        <span style=\"color: #C678DD;\">try</span> (<span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">out</span> = outputProvider.apply(Path.of(filesList.get(i)))) {            ftp.retrieveFile(remoteDir.resolve(filesList.get(i)).toString(), out);        }    }}</pre></div></div></div></div><div id=\"outline-container-org9c37ca7\" class=\"outline-2\"><h2 id=\"org9c37ca7\">Example</h2><div class=\"outline-text-2\" id=\"text-org9c37ca7\"><p>Here is an example of using the <code>FtpClient</code> to list and download multiple files form an FTP server.</p><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">FtiUtilRun</span> {    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">main</span>(<span style=\"color: #E5C07B;\">String</span>... <span style=\"color: #E06C75;\">args</span>) <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">IOException</span> {        <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">create and open connection</span>        <span style=\"color: #C678DD;\">try</span> (<span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">ftpClient</span> = FtpClient.getClient             (URI.create(<span style=\"color: #98C379;\">\"ftp.ebi.ac.uk\"</span>), <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FTPClient</span>())){            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">remote directory</span>            <span style=\"color: #E5C07B;\">var</span> <span style=\"color: #E06C75;\">remoteDir</span> = Path.of                (<span style=\"color: #98C379;\">\"/pub/databases/opentargets/\"</span> +                 <span style=\"color: #98C379;\">\"platform/latest/output/etl/json/diseases/\"</span>);            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">print a list of files in a remote directory</span>            ftpClient.listFiles(remoteDir)                .forEach(System.out::println);            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">provide output stream to copy a remote file content into</span>            <span style=\"color: #E5C07B;\">Function</span>&lt;<span style=\"color: #E5C07B;\">Path</span>, <span style=\"color: #E5C07B;\">OutputStream</span>&gt; <span style=\"color: #E06C75;\">outputProvider</span> = file -&gt; {                <span style=\"color: #C678DD;\">try</span> {                    <span style=\"color: #C678DD;\">return</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">BufferedOutputStream</span>                       (<span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">FileOutputStream</span>(file.toFile()));                } <span style=\"color: #C678DD;\">catch</span> (<span style=\"color: #E5C07B;\">FileNotFoundException</span> <span style=\"color: #E06C75;\">e</span>) {                    <span style=\"color: #C678DD;\">throw</span> <span style=\"color: #C678DD;\">new</span> <span style=\"color: #E5C07B;\">RuntimeException</span>                        (<span style=\"color: #98C379;\">\"Cannot create files in the local directory...\"</span>,e);                }            };            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">progress reporter</span>            <span style=\"color: #E5C07B;\">Consumer</span>&lt;<span style=\"color: #E5C07B;\">String</span>&gt; <span style=\"color: #E06C75;\">progressReporter</span> = System.out::println;            <span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">download all files in the directory</span>            ftpClient.downloadAllFiles                (remoteDir, outputProvider, progressReporter);        }    }}</pre></div><p>Output:</p><div class=\"org-src-container\"><pre class=\"src src-shell\">-rw-r--r--    1 ftp      ftp             0 Jun 20 12:03 _SUCCESS-rw-r--r--    1 ftp      ftp       1760417 Jun 20 12:03 part-00000-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1699456 Jun 20 12:03 part-00001-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1745262 Jun 20 12:03 part-00002-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1664693 Jun 20 12:03 part-00003-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2135641 Jun 20 12:03 part-00004-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2115169 Jun 20 12:03 part-00005-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2322320 Jun 20 12:03 part-00006-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2165083 Jun 20 12:03 part-00007-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1818603 Jun 20 12:03 part-00008-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1890536 Jun 20 12:03 part-00009-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       1806820 Jun 20 12:03 part-00010-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp       2078683 Jun 20 12:03 part-00011-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        644630 Jun 20 12:03 part-00012-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        697469 Jun 20 12:03 part-00013-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        684315 Jun 20 12:03 part-00014-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json-rw-r--r--    1 ftp      ftp        676954 Jun 20 12:03 part-00015-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json<span style=\"color: #61AFEF;\">Downloading</span> (1 of 17):[_SUCCESS]<span style=\"color: #61AFEF;\">Downloading</span> (2 of 17):[part-00000-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (3 of 17):[part-00001-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (4 of 17):[part-00002-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (5 of 17):[part-00003-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (6 of 17):[part-00004-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (7 of 17):[part-00005-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (8 of 17):[part-00006-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (9 of 17):[part-00007-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (10 of 17):[part-00008-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (11 of 17):[part-00009-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (12 of 17):[part-00010-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (13 of 17):[part-00011-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (14 of 17):[part-00012-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (15 of 17):[part-00013-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (16 of 17):[part-00014-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]<span style=\"color: #61AFEF;\">Downloading</span> (17 of 17):[part-00015-083c466a-3036-42e0-97ab-87035b32cc9b-c000.json]Process finished with exit code 0</pre></div><hr /><p>Thank you.</p></div></div>",
            "url": "http://localhost:4000/2022/07/30/java-fundamentals-ftputil",
            
            
            
            
            
            "date_published": "2022-07-30T12:11:27+01:00",
            "date_modified": "2022-07-30T12:11:27+01:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2022/06/29/css-debugging-html",
            "title": "Using CSS <code>outline</code> property to visualise the structure of an html page.",
            "summary": null,
            "content_text": "Language: CSSTechniqueTo identify discrepancies in placement of html elements you can add CSS outline property to make their contours visible as follows.div {    outline: 1px solid blue;}Below is an example of using the property to see contours of &lt;div&gt; and &lt;p&gt; elements.  See the Pen   Outline elements by Rustam (@rustam-isangulov)  on CodePen.ExampleBelow is an example of using this technique for a blog post \"debugging\".",
            "content_html": "<div class=\"post\"><p>Language: CSS</p></div><div id=\"outline-container-org02933f8\" class=\"outline-2\"><h3 id=\"org02933f8\">Technique</h3><div class=\"outline-text-2\" id=\"text-org02933f8\"><p>To identify discrepancies in placement of html elements you can add <i>CSS</i> <code>outline</code> property to make their contours visible as follows.</p><div class=\"org-src-container\"><pre class=\"src src-css\"><span style=\"color: #61AFEF;\">div </span>{    <span style=\"color: #C678DD;\">outline</span>: 1px solid <span style=\"color: #ffffff; background-color: #0000ff;\">blue</span>;}</pre></div><p>Below is an example of using the property to see contours of <code>&lt;div&gt;</code> and <code>&lt;p&gt;</code> elements.</p><p class=\"codepen\" data-height=\"360\" data-default-tab=\"html,result\" data-slug-hash=\"xxWxNEq\" data-user=\"rustam-isangulov\" style=\"height: 360px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">  <span>See the Pen <a href=\"https://codepen.io/rustam-isangulov/pen/xxWxNEq\">  Outline elements</a> by Rustam (<a href=\"https://codepen.io/rustam-isangulov\">@rustam-isangulov</a>)  on <a href=\"https://codepen.io\">CodePen</a>.</span></p><script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script><p></p></div></div><div id=\"outline-container-org237cc94\" class=\"outline-2\"><h3 id=\"org237cc94\">Example</h3><div class=\"outline-text-2\" id=\"text-org237cc94\"><p>Below is an example of using this technique for a blog post \"debugging\".</p><p><img src=\"/images/CSS-clean.jpg\" alt=\"CSS-clean.jpg\" /><img src=\"/images/CSS-outline.jpg\" alt=\"CSS-outline.jpg\" /></p><hr /></div></div>",
            "url": "http://localhost:4000/2022/06/29/css-debugging-html",
            
            
            
            
            
            "date_published": "2022-06-29T12:00:03+01:00",
            "date_modified": "2022-06-29T12:00:03+01:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2022/06/27/html-is-possible",
            "title": "Creating an elementary spring web app and deplying it in a Multipass Docker environment",
            "summary": null,
            "content_text": "Toolkit: macOS | InelliJ IDEA | Docker Desktop | MultipassSources: GitHubReview the structure of a static spring web appCreate a basic spring web appCreate spring project with spring initializrNavigate to https:start.spring.io and select following options:Project: Maven ProjectLanguage: JavaSpring Boot: 2.7.1Project Metadata:Artifact: \"springboot_ elementary\"Descripton: \"Elementary project for Spring Boot\"Packaging: JarJava: 11Dependencies: Spring WebUse \"GENERATE\" button to download an archive with the new project. Unzip the archive and move springboot_ elementary folder to a development area.Open the new project with IntelliJ and let dependencies to be downloaded. Specify run configuration with application name and main class through Run -&gt; Run... menu as follows.Now you can build and run the app using IntelliJ, for example using Run -&gt; Run or Build -&gt; Build Project menus.Add controller classCreate a new package controllers under com.example.springboot_elementary folder. Add HomeController class in this package as follows.@Controllerpublic class HomeController {    @GetMapping(\"/\")    public String home() {        return \"home.html\";    }}Add static html sourceCreate a new home.html file under src/main/resources/static folder with the following content.&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"  xmlns=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt;    &lt;meta charset=\"UTF-8\"&gt;    &lt;title&gt;Spring web app&lt;/title&gt;&lt;/head&gt;&lt;body&gt;  &lt;h2&gt;Home page for the Spring web app...&lt;/h2&gt;&lt;/body&gt;&lt;/html&gt;Add controller test classCreate a new package controllers in src/test/java/com.example.springboot_elementary. Add HomeControllerTest class with content as below.// additional static imports for MockMvc methodsimport static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;@WebMvcTest(HomeController.class)public class HomeControllerTest {    @Autowired    private MockMvc mockMvc;    @Test    public void testHomePage() throws Exception {        mockMvc.perform(get(\"/\"))                .andExpect(status().isOk())                .andExpect(view().name(\"home.html\"));    }}Run the app locallyNow you can build and run the app with the final project structure as follows.Run the app with IntelliJ using Run -&gt; Run 'springboot_ elementary' menu. Open a browser and navigate to localhost:8080 to validate that the app is up and running as in the example below.Deploy the app as a Docker container locallyReview the structure of a local Docker deploymentAdd image name pattern to maven project configurationAdd image configuration to spring-boot-maven-plugin in pom.xml, and re-Load Maven Changes as follows.This is to set the name template for docker images.&lt;build&gt;  &lt;plugins&gt;    &lt;plugin&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;      &lt;configuration&gt;        &lt;image&gt; &lt;name&gt;${project.artifactId}:${project.version}&lt;/name&gt;        &lt;/image&gt;      &lt;/configuration&gt;    &lt;/plugin&gt;  &lt;/plugins&gt;&lt;/build&gt;Create a Docker imageLaunch Docker Desktop app.Switch to Terminal panel in IntelliJ through View -&gt; Tool Windows -&gt; Terminal. Run image building script as follows.% ./mvnw spring-boot:build-imageCheck that the docker image has been created.% docker image list springboot_elementaryREPOSITORY              TAG              IMAGE ID       CREATED        SIZEspringboot_elementary   0.0.1-SNAPSHOT   d24fd8f3e812   42 years ago   262MBNote: on the question of '42 years ago' refer here https://buildpacks.io/docs/features/reproducibility/Run the app as a local docker containerRun the newly created docker image as follows.% docker run -p8090:8080 springboot_elementary:0.0.1-SNAPSHOTNote: use Ctrl-C to stop the process inside Terminal tab.Validate the app is up and running by navigating to localhost:8090 address in your browser.Deploy the app as a Multipass Docker containerReview the structure of a Multipass Docker deploymentCreate Multipass Docker instanceLaunch Multipass VM with a Docker instance using the following command inside the Terminal tab.% multipass launch dockerCheck the running docker instance with the following command. Note instance's IP address.% multipass info dockerName:           dockerState:          RunningIPv4:           192.168.64.3                172.17.0.1Release:        Ubuntu 21.10Image hash:     d5ebdea3522c (Ubuntu 21.10)Load:           0.26 0.62 0.33Disk usage:     2.4G out of 38.6GMemory usage:   210.7M out of 3.8GMounts:         --Copy docker image to Multipass Docker instanceCreate a tar archive of the docker image from local Docker Desktop instance by running the following command.% docker save -o springboot_elementary.tar springboot_elementaryCheck that the image archive has been created.% ls *.tarspringboot_elementary.tarTransfer the archive to Multipass Docker instance using the command below.% multipass transfer springboot_elementary.tar docker:/home/ubuntu/springboot_elementary.tarCheck if the file has been trasferred to a home directory of the multipass docker instance.% multipass exec docker lsspringboot_elementary.tarRun the app as a Multipass Docker containerOpen command line inside Multipass Docker image with the following command.% multipass shell dockerubuntu@docker:~$Note: to exit from the multipass instance shell and return back to IntelliJ Terminal use exit command.Create a docker image from the archive as follows.ubuntu@docker:~$ docker load -i springboot_elementary.tarCheck that the image has been created.ubuntu@docker:~$ docker image listREPOSITORY               TAG              IMAGE ID       CREATED        SIZEportainer/portainer-ce   latest           7b6e59279c38   6 weeks ago    275MBspringboot_elementary    0.0.1-SNAPSHOT   d24fd8f3e812   42 years ago   262MBNow you can run the spring web app as a container inside Multipass VM.ubuntu@docker:~$ docker run -p8085:8080 springboot_elementary:0.0.1-SNAPSHOTNote: use Ctrl-C to stop the process inside the terminal.Navigate browser to the 192.168.64.3:8085 address to validate that the web app is up and running.",
            "content_html": "<div><p>Toolkit: macOS | <a href=\"https://www.jetbrains.com/idea/\">InelliJ IDEA</a> | <a href=\"https://www.docker.com/products/docker-desktop/\">Docker Desktop</a> | <a href=\"https://multipass.run\">Multipass</a></p><p>Sources: <a href=\"https://github.com/rustam-isangulov/spring.io/tree/main/springboot_elementary\">GitHub</a></p></div><div id=\"outline-container-org3319e7d\" class=\"outline-2\"><h2 id=\"org3319e7d\">Review the structure of a static spring web app</h2><div class=\"outline-text-2\" id=\"text-org3319e7d\"><div id=\"org3643a31\" class=\"figure\"><p><img src=\"/images/MVCElementary.png\" alt=\"MVCElementary.png\" /></p></div><div id=\"orgabea983\" class=\"figure\"><p><img src=\"/images/MVCElementarySeq.png\" alt=\"MVCElementarySeq.png\" /></p></div><hr /></div></div><div id=\"outline-container-org7b5e7e3\" class=\"outline-2\"><h2 id=\"org7b5e7e3\">Create a basic spring web app</h2><div class=\"outline-text-2\" id=\"text-org7b5e7e3\"></div><div id=\"outline-container-org7bb6064\" class=\"outline-3\"><h3 id=\"org7bb6064\">Create spring project with <i>spring initializr</i></h3><div class=\"outline-text-3\" id=\"text-org7bb6064\"><p>Navigate to <a href=\"https:start.spring.io\">https:start.spring.io</a> and select following options:</p><ul class=\"org-ul\"><li><b>Project</b>: Maven Project</li><li><b>Language</b>: Java</li><li><b>Spring Boot</b>: 2.7.1</li><li>Project Metadata:<ul class=\"org-ul\"><li><b>Artifact</b>: \"springboot_ elementary\"</li><li><b>Descripton</b>: \"Elementary project for Spring Boot\"</li><li><b>Packaging</b>: Jar</li><li><b>Java</b>: 11</li></ul></li><li><b>Dependencies</b>: Spring Web</li></ul><div id=\"org4a3bb5d\" class=\"figure\"><p><img src=\"/images/SpringBootElem-Initializr.jpg\" alt=\"SpringBootElem-Initializr.jpg\" /></p></div><p>Use <b>\"GENERATE\"</b> button to download an archive with the new project. Unzip the archive and move <code>springboot_ elementary</code> folder to a development area.</p><p>Open the new project with <b><i>IntelliJ</i></b> and let dependencies to be downloaded. Specify run configuration with application name and main class through <code>Run -&gt; Run...</code> menu as follows.</p><div id=\"org7f41494\" class=\"figure\"><p><img src=\"/images/SpringBootElem-Project.jpg\" alt=\"SpringBootElem-Project.jpg\" /></p></div><p>Now you can build and run the app using <b><i>IntelliJ</i></b>, for example using <code>Run -&gt; Run</code> or <code>Build -&gt; Build Project</code> menus.</p></div></div><div id=\"outline-container-orgdf1c2c6\" class=\"outline-3\"><h3 id=\"orgdf1c2c6\">Add controller class</h3><div class=\"outline-text-3\" id=\"text-orgdf1c2c6\"><p>Create a new package <code>controllers</code> under <code>com.example.springboot_elementary</code> folder. Add <code>HomeController</code> class in this package as follows.</p><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #56B6C2;\">@Controller</span><span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">HomeController</span> {    <span style=\"color: #56B6C2;\">@GetMapping</span>(<span style=\"color: #98C379;\">\"/\"</span>)    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">String</span> <span style=\"color: #61AFEF;\">home</span>() {        <span style=\"color: #C678DD;\">return</span> <span style=\"color: #98C379;\">\"home.html\"</span>;    }}</pre></div></div></div><div id=\"outline-container-orgc969dfc\" class=\"outline-3\"><h3 id=\"orgc969dfc\">Add static html source</h3><div class=\"outline-text-3\" id=\"text-orgc969dfc\"><p>Create a new <code>home.html</code> file under <code>src/main/resources/static</code> folder with the following content.</p><div class=\"org-src-container\"><pre class=\"src src-html\">&lt;<span style=\"color: #C678DD;\">!DOCTYPE</span> html&gt;&lt;<span style=\"color: #E06C75;\">html</span> <span style=\"color: #D19A66;\">lang</span>=<span style=\"color: #98C379;\">\"en\"</span>  <span style=\"color: #D19A66;\">xmlns</span>=<span style=\"color: #98C379;\">\"http://www.w3.org/1999/xhtml\"</span>&gt;&lt;<span style=\"color: #E06C75;\">head</span>&gt;    &lt;<span style=\"color: #E06C75;\">meta</span> <span style=\"color: #D19A66;\">charset</span>=<span style=\"color: #98C379;\">\"UTF-8\"</span>&gt;    &lt;<span style=\"color: #E06C75;\">title</span>&gt;<span style=\"font-weight: bold; text-decoration: underline;\">Spring web app</span>&lt;/<span style=\"color: #E06C75;\">title</span>&gt;&lt;/<span style=\"color: #E06C75;\">head</span>&gt;&lt;<span style=\"color: #E06C75;\">body</span>&gt;  &lt;<span style=\"color: #E06C75;\">h2</span>&gt;<span style=\"font-weight: bold; font-style: italic; text-decoration: underline;\">Home page for the Spring web app...</span>&lt;/<span style=\"color: #E06C75;\">h2</span>&gt;&lt;/<span style=\"color: #E06C75;\">body</span>&gt;&lt;/<span style=\"color: #E06C75;\">html</span>&gt;</pre></div></div></div><div id=\"outline-container-org35c515b\" class=\"outline-3\"><h3 id=\"org35c515b\">Add controller test class</h3><div class=\"outline-text-3\" id=\"text-org35c515b\"><p>Create a new package <code>controllers</code> in <code>src/test/java/com.example.springboot_elementary</code>. Add <code>HomeControllerTest</code> class with content as below.</p><div class=\"org-src-container\"><pre class=\"src src-java\"><span style=\"color: #5C6370; font-style: italic;\">// </span><span style=\"color: #5C6370; font-style: italic;\">additional static imports for MockMvc methods</span><span style=\"color: #C678DD;\">import</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #56B6C2;\">org</span>.<span style=\"color: #56B6C2;\">springframework</span>.<span style=\"color: #56B6C2;\">test</span>.<span style=\"color: #56B6C2;\">web</span>.<span style=\"color: #56B6C2;\">servlet</span>.<span style=\"color: #56B6C2;\">request</span>.MockMvcRequestBuilders.<span style=\"color: #E5C07B;\">get</span>;<span style=\"color: #C678DD;\">import</span> <span style=\"color: #C678DD;\">static</span> <span style=\"color: #56B6C2;\">org</span>.<span style=\"color: #56B6C2;\">springframework</span>.<span style=\"color: #56B6C2;\">test</span>.<span style=\"color: #56B6C2;\">web</span>.<span style=\"color: #56B6C2;\">servlet</span>.<span style=\"color: #56B6C2;\">result</span>.<span style=\"color: #56B6C2;\">MockMvcResultMatchers</span>.*;<span style=\"color: #56B6C2;\">@WebMvcTest</span>(HomeController.<span style=\"color: #C678DD;\">class</span>)<span style=\"color: #C678DD;\">public</span> <span style=\"color: #C678DD;\">class</span> <span style=\"color: #E5C07B;\">HomeControllerTest</span> {    <span style=\"color: #56B6C2;\">@Autowired</span>    <span style=\"color: #C678DD;\">private</span> <span style=\"color: #E5C07B;\">MockMvc</span> <span style=\"color: #E06C75;\">mockMvc</span>;    <span style=\"color: #56B6C2;\">@Test</span>    <span style=\"color: #C678DD;\">public</span> <span style=\"color: #E5C07B;\">void</span> <span style=\"color: #61AFEF;\">testHomePage</span>() <span style=\"color: #C678DD;\">throws</span> <span style=\"color: #E5C07B;\">Exception</span> {        mockMvc.perform(get(<span style=\"color: #98C379;\">\"/\"</span>))                .andExpect(status().isOk())                .andExpect(view().name(<span style=\"color: #98C379;\">\"home.html\"</span>));    }}</pre></div></div></div><div id=\"outline-container-org42880a5\" class=\"outline-3\"><h3 id=\"org42880a5\">Run the app locally</h3><div class=\"outline-text-3\" id=\"text-org42880a5\"><p>Now you can build and run the app with the final project structure as follows.</p><div id=\"orga404e63\" class=\"figure\"><p><img src=\"/images/SpringBootElem-Structure.jpg\" alt=\"SpringBootElem-Structure.jpg\" width=\"300\" /></p></div><p>Run the app with <b><i>IntelliJ</i></b> using <code>Run -&gt; Run 'springboot_ elementary'</code> menu. Open a browser and navigate to <code>localhost:8080</code> to validate that the app is up and running as in the example below.</p><div id=\"org806250b\" class=\"figure\"><p><img src=\"/images/SpringBootElem-Safari.jpg\" alt=\"SpringBootElem-Safari.jpg\" /></p></div><hr /></div></div></div><div id=\"outline-container-org2ebd1c6\" class=\"outline-2\"><h2 id=\"org2ebd1c6\">Deploy the app as a Docker container locally</h2><div class=\"outline-text-2\" id=\"text-org2ebd1c6\"></div><div id=\"outline-container-orgefd0609\" class=\"outline-3\"><h3 id=\"orgefd0609\">Review the structure of a local Docker deployment</h3><div class=\"outline-text-3\" id=\"text-orgefd0609\"><div id=\"org2d59c32\" class=\"figure\"><p><img src=\"/images/MVCElementaryDockerLocal.png\" alt=\"MVCElementaryDockerLocal.png\" /></p></div></div></div><div id=\"outline-container-org198aef6\" class=\"outline-3\"><h3 id=\"org198aef6\">Add image name pattern to maven project configuration</h3><div class=\"outline-text-3\" id=\"text-org198aef6\"><p>Add image configuration to <code>spring-boot-maven-plugin</code> in <code>pom.xml</code>, and <b>re-Load Maven Changes</b> as follows.This is to set the name template for docker images.</p><div class=\"org-src-container\"><pre class=\"src src-html\">&lt;<span style=\"color: #E06C75;\">build</span>&gt;  &lt;<span style=\"color: #E06C75;\">plugins</span>&gt;    &lt;<span style=\"color: #E06C75;\">plugin</span>&gt;      &lt;<span style=\"color: #E06C75;\">groupId</span>&gt;org.springframework.boot&lt;/<span style=\"color: #E06C75;\">groupId</span>&gt;      &lt;<span style=\"color: #E06C75;\">artifactId</span>&gt;spring-boot-maven-plugin&lt;/<span style=\"color: #E06C75;\">artifactId</span>&gt;      &lt;<span style=\"color: #E06C75;\">configuration</span>&gt;        &lt;<span style=\"color: #E06C75;\">image</span>&gt; &lt;<span style=\"color: #E06C75;\">name</span>&gt;${project.artifactId}:${project.version}&lt;/<span style=\"color: #E06C75;\">name</span>&gt;        &lt;/<span style=\"color: #E06C75;\">image</span>&gt;      &lt;/<span style=\"color: #E06C75;\">configuration</span>&gt;    &lt;/<span style=\"color: #E06C75;\">plugin</span>&gt;  &lt;/<span style=\"color: #E06C75;\">plugins</span>&gt;&lt;/<span style=\"color: #E06C75;\">build</span>&gt;</pre></div></div></div><div id=\"outline-container-org8c1fd5e\" class=\"outline-3\"><h3 id=\"org8c1fd5e\">Create a Docker image</h3><div class=\"outline-text-3\" id=\"text-org8c1fd5e\"><p>Launch Docker Desktop app.</p><div id=\"org8733b93\" class=\"figure\"><p><img src=\"/images/SpringBootElem-DockerDesktop.jpg\" alt=\"SpringBootElem-DockerDesktop.jpg\" /></p></div><p>Switch to <code>Terminal</code> panel in <b><i>IntelliJ</i></b> through <code>View -&gt; Tool Windows -&gt; Terminal</code>. Run image building script as follows.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% ./mvnw spring-boot:build-image</pre></div><p>Check that the docker image has been created.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% docker image list springboot_elementaryREPOSITORY              TAG              IMAGE ID       CREATED        SIZEspringboot_elementary   0.0.1-SNAPSHOT   d24fd8f3e812   42 years ago   262MB</pre></div><p><i>Note: on the question of '42 years ago' refer here <a href=\"https://buildpacks.io/docs/features/reproducibility/\">https://buildpacks.io/docs/features/reproducibility/</a></i></p></div></div><div id=\"outline-container-org89d049f\" class=\"outline-3\"><h3 id=\"org89d049f\">Run the app as a local docker container</h3><div class=\"outline-text-3\" id=\"text-org89d049f\"><p>Run the newly created docker image as follows.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% docker run -p8090:8080 springboot_elementary:0.0.1-SNAPSHOT</pre></div><p><i>Note: use <code>Ctrl-C</code> to stop the process inside <code>Terminal</code> tab.</i></p><p>Validate the app is up and running by navigating to <code>localhost:8090</code> address in your browser.</p><hr /></div></div></div><div id=\"outline-container-org59ef0e5\" class=\"outline-2\"><h2 id=\"org59ef0e5\">Deploy the app as a Multipass Docker container</h2><div class=\"outline-text-2\" id=\"text-org59ef0e5\"></div><div id=\"outline-container-org598f4c0\" class=\"outline-3\"><h3 id=\"org598f4c0\">Review the structure of a Multipass Docker deployment</h3><div class=\"outline-text-3\" id=\"text-org598f4c0\"><div id=\"org1f6fe86\" class=\"figure\"><p><img src=\"/images/MVCElementaryDockerMultipass.png\" alt=\"MVCElementaryDockerMultipass.png\" /></p></div></div></div><div id=\"outline-container-orgd69aa63\" class=\"outline-3\"><h3 id=\"orgd69aa63\">Create Multipass Docker instance</h3><div class=\"outline-text-3\" id=\"text-orgd69aa63\"><p>Launch Multipass VM with a Docker instance using the following command inside the <code>Terminal</code> tab.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass launch docker</pre></div><p>Check the running docker instance with the following command. Note instance's IP address.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass info dockerName:           dockerState:          RunningIPv4:           192.168.64.3                172.17.0.1Release:        Ubuntu 21.10Image hash:     d5ebdea3522c (Ubuntu 21.10)Load:           0.26 0.62 0.33Disk usage:     2.4G out of 38.6GMemory usage:   210.7M out of 3.8GMounts:         --</pre></div></div></div><div id=\"outline-container-orgec47650\" class=\"outline-3\"><h3 id=\"orgec47650\">Copy docker image to Multipass Docker instance</h3><div class=\"outline-text-3\" id=\"text-orgec47650\"><p>Create a <code>tar</code> archive of the docker image from local Docker Desktop instance by running the following command.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% docker save -o springboot_elementary.tar springboot_elementary</pre></div><p>Check that the image archive has been created.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% ls *.tarspringboot_elementary.tar</pre></div><p>Transfer the archive to Multipass Docker instance using the command below.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass transfer springboot_elementary.tar docker:/home/ubuntu/springboot_elementary.tar</pre></div><p>Check if the file has been trasferred to a home directory of the multipass docker instance.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass exec docker lsspringboot_elementary.tar</pre></div></div></div><div id=\"outline-container-org58b108a\" class=\"outline-3\"><h3 id=\"org58b108a\">Run the app as a Multipass Docker container</h3><div class=\"outline-text-3\" id=\"text-org58b108a\"><p>Open command line inside Multipass Docker image with the following command.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">% multipass shell dockerubuntu@docker:~$</pre></div><p><i>Note: to exit from the multipass instance shell and return back to <b><i>IntelliJ</i></b> <code>Terminal</code> use <code>exit</code> command.</i></p><p>Create a docker image from the archive as follows.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">ubuntu@docker:~$ docker load -i springboot_elementary.tar</pre></div><p>Check that the image has been created.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">ubuntu@docker:~$ docker image listREPOSITORY               TAG              IMAGE ID       CREATED        SIZEportainer/portainer-ce   latest           7b6e59279c38   6 weeks ago    275MBspringboot_elementary    0.0.1-SNAPSHOT   d24fd8f3e812   42 years ago   262MB</pre></div><p>Now you can run the spring web app as a container inside Multipass VM.</p><div class=\"org-src-container\"><pre class=\"src src-shell\">ubuntu@docker:~$ docker run -p8085:8080 springboot_elementary:0.0.1-SNAPSHOT</pre></div><p><i>Note: use <code>Ctrl-C</code> to stop the process inside the terminal.</i></p><p>Navigate browser to the <code>192.168.64.3:8085</code> address to validate that the web app is up and running.</p><div id=\"org478b6f3\" class=\"figure\"><p><img src=\"/images/SpringBootElem-SafariUbuntu.jpg\" alt=\"SpringBootElem-SafariUbuntu.jpg\" /></p></div><hr /></div></div></div>",
            "url": "http://localhost:4000/2022/06/27/html-is-possible",
            
            
            
            
            
            "date_published": "2022-06-27T12:11:27+01:00",
            "date_modified": "2022-06-27T12:11:27+01:00",
            
                "author": 
                "{"twitter"=>nil, "name"=>nil, "avatar"=>nil, "email"=>nil, "url"=>nil}"
                
            
        }
    
    ]
}